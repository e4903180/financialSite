{"ast":null,"code":"import _slicedToArray from \"/home/cosbi/financialSite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/cosbi/financialSite/frontend/src/customTable/customTable.js\";\nimport React from 'react';\nimport { useTable, useGlabalFilter, useAsyncDebounce, useFilters } from 'react-table';\nimport './customTable.css';\n\nfunction GlobalFilter(_ref) {\n  var preGlobalFilteredRows = _ref.preGlobalFilteredRows,\n      globalFilter = _ref.globalFilter,\n      setGlobalFilter = _ref.setGlobalFilter;\n  var count = preGlobalFilteredRows.length;\n\n  var _React$useState = React.useState(globalFilter),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _onChange = useAsyncDebounce(function (value) {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, \"Search:\", ' ', /*#__PURE__*/React.createElement(\"input\", {\n    value: value || \"\",\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n\n      _onChange(e.target.value);\n    },\n    placeholder: \"\".concat(count, \" records...\"),\n    style: {\n      fontSize: '1.1rem',\n      border: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction CustomTable(props) {\n  function Table(_ref2) {\n    var _this = this;\n\n    var columns = _ref2.columns,\n        data = _ref2.data;\n\n    var _useTable = useTable({\n      columns: columns,\n      data: data\n    }, useFilters, useGlabalFilter),\n        getTableProps = _useTable.getTableProps,\n        getTableBodyProps = _useTable.getTableBodyProps,\n        headerGroups = _useTable.headerGroups,\n        rows = _useTable.rows,\n        prepareRow = _useTable.prepareRow,\n        preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n        state = _useTable.state,\n        setGlobalFilter = _useTable.setGlobalFilter; // Render the UI for your table\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GlobalFilter, {\n      preGlobalFilteredRows: preGlobalFilteredRows,\n      globalFilter: state.globalFilter,\n      setGlobalFilter: setGlobalFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, headerGroups.map(function (headerGroup) {\n      return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }\n      }), headerGroup.headers.map(function (column) {\n        return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 19\n          }\n        }), column.render('Header'));\n      }));\n    })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), rows.map(function (row, i) {\n      prepareRow(row);\n      return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }), row.cells.map(function (cell) {\n        return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 28\n          }\n        }), cell.render('Cell'));\n      }));\n    }))));\n  }\n\n  return /*#__PURE__*/React.createElement(Table, {\n    columns: props.columns,\n    data: props.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default CustomTable;","map":{"version":3,"sources":["/home/cosbi/financialSite/frontend/src/customTable/customTable.js"],"names":["React","useTable","useGlabalFilter","useAsyncDebounce","useFilters","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","useState","value","setValue","onChange","undefined","e","target","fontSize","border","CustomTable","props","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTable, useGlabalFilter, useAsyncDebounce, useFilters } from 'react-table'\nimport './customTable.css'\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\nfunction CustomTable(props) {\n  function Table({ columns, data }) {\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n      preGlobalFilteredRows,\n      state,\n      setGlobalFilter\n    } = useTable({\n      columns,\n      data\n    }, useFilters,\n      useGlabalFilter)\n  \n    // Render the UI for your table\n    return (\n      <>\n        <span>\n          <GlobalFilter\n            preGlobalFilteredRows={preGlobalFilteredRows}\n            globalFilter={state.globalFilter}\n            setGlobalFilter={setGlobalFilter}\n          />\n        </span>\n        \n        <table {...getTableProps()}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n              prepareRow(row)\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  })}\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </>\n    )\n  }\n\n    return (\n        <Table columns = { props.columns } data = { props.data } />\n    );\n}\n\nexport default CustomTable;"]},"metadata":{},"sourceType":"module"}