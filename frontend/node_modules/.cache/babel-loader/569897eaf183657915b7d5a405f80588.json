{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropdownSubmenu = void 0;\n\nvar React = __importStar(require(\"react\"));\n\nvar react_1 = require(\"react\");\n\nexports.DropdownSubmenu = function (props) {\n  var refSubMenuContent = react_1.useRef(null);\n  var className = 'dropdown-submenu-container';\n  className = props.className ? className + ' ' + props.className : className;\n\n  var onClick = function onClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (refSubMenuContent.current) {\n      var show = false;\n\n      if (refSubMenuContent.current.classList.contains('show')) {\n        hideChildren(refSubMenuContent.current);\n      } else {\n        show = true;\n        hideSiblings();\n      }\n\n      refSubMenuContent.current.classList.toggle('show');\n\n      if (typeof props.onToggle === 'function') {\n        props.onToggle(show, {\n          source: 'select',\n          originalEvent: event\n        });\n      }\n    }\n  };\n\n  var hideSiblings = function hideSiblings() {\n    if (refSubMenuContent.current) {\n      var parents = getParents(refSubMenuContent.current, '.dropdown-menu.show');\n\n      if (parents.length > 1) {\n        hideChildren(parents[1]);\n      }\n    }\n  };\n\n  var hideChildren = function hideChildren(parent) {\n    var children = parent.querySelectorAll('.dropdown-menu.show');\n\n    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n      var child = children_1[_i];\n      child.classList.remove('show');\n    }\n  };\n\n  var getParents = function getParents(elem, selector) {\n    var nodes = [];\n    var element = elem;\n    nodes.push(element);\n\n    while (element.parentNode) {\n      if (typeof element.parentNode.matches === 'function' && element.parentNode.matches(selector)) {\n        nodes.push(element.parentNode);\n      }\n\n      element = element.parentNode;\n    }\n\n    return nodes;\n  };\n\n  return React.createElement(\"div\", {\n    className: className,\n    id: props.id\n  }, React.createElement(\"a\", {\n    href: props.href,\n    className: \"dropdown-item dropdown-submenu dropdown-toggle\",\n    onClick: onClick\n  }, props.title), React.createElement(\"div\", {\n    className: \"dropdown-menu\",\n    ref: refSubMenuContent\n  }, props.children));\n};","map":null,"metadata":{},"sourceType":"script"}