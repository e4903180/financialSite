{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"referenceElement\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { usePopper } from 'react-popper';\nimport { noop } from '../../utils';\nvar alignValues = ['justify', 'left', 'right']; // `Element` is not defined during server-side rendering, so shim it here.\n\n/* istanbul ignore next */\n\nvar SafeElement = typeof Element === 'undefined' ? noop : Element;\nvar propTypes = {\n  /**\n   * Specify menu alignment. The default value is `justify`, which makes the\n   * menu as wide as the input and truncates long values. Specifying `left`\n   * or `right` will align the menu to that side and the width will be\n   * determined by the length of menu item values.\n   */\n  align: PropTypes.oneOf(alignValues),\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether the menu should appear above the input.\n   */\n  dropup: PropTypes.bool,\n\n  /**\n   * Whether or not to automatically adjust the position of the menu when it\n   * reaches the viewport boundaries.\n   */\n  flip: PropTypes.bool,\n  isMenuShown: PropTypes.bool,\n  positionFixed: PropTypes.bool,\n  // @ts-ignore\n  referenceElement: PropTypes.instanceOf(SafeElement)\n};\nvar defaultProps = {\n  align: 'justify',\n  dropup: false,\n  flip: false,\n  isMenuShown: false,\n  positionFixed: false\n};\nvar setPopperWidth = {\n  enabled: true,\n  fn: function fn(data) {\n    // eslint-disable-next-line no-param-reassign\n    data.state.styles.popper.width = \"\".concat(data.state.rects.reference.width, \"px\");\n  },\n  name: 'setPopperWidth',\n  phase: 'write'\n};\nexport function getModifiers(props) {\n  var modifiers = [{\n    enabled: !!props.flip,\n    name: 'flip'\n  }];\n\n  if (props.align !== 'right' && props.align !== 'left') {\n    modifiers.push(setPopperWidth);\n  }\n\n  return modifiers;\n}\nexport function getPlacement(props) {\n  var x = props.align === 'right' ? 'end' : 'start';\n  var y = props.dropup ? 'top' : 'bottom';\n  return \"\".concat(y, \"-\").concat(x);\n}\n\nvar Overlay = function Overlay(_ref) {\n  var referenceElement = _ref.referenceElement,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      popperElement = _useState2[0],\n      attachRef = _useState2[1];\n\n  var _usePopper = usePopper(referenceElement, popperElement, {\n    modifiers: getModifiers(props),\n    placement: getPlacement(props),\n    strategy: props.positionFixed ? 'fixed' : 'absolute'\n  }),\n      attributes = _usePopper.attributes,\n      styles = _usePopper.styles,\n      forceUpdate = _usePopper.forceUpdate;\n\n  if (!props.isMenuShown) {\n    return null;\n  }\n\n  return props.children(_objectSpread(_objectSpread({}, attributes.popper), {}, {\n    innerRef: attachRef,\n    inputHeight: (referenceElement === null || referenceElement === void 0 ? void 0 : referenceElement.offsetHeight) || 0,\n    scheduleUpdate: forceUpdate,\n    style: styles.popper\n  }));\n};\n\nOverlay.propTypes = propTypes;\nOverlay.defaultProps = defaultProps;\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}