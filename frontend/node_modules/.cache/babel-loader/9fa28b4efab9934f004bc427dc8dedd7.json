{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"onClick\", \"option\", \"position\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { useTypeaheadContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  option: optionType.isRequired,\n  position: PropTypes.number\n};\nexport function useItem(_ref) {\n  var label = _ref.label,\n      onClick = _ref.onClick,\n      option = _ref.option,\n      position = _ref.position,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTypeaheadContext = useTypeaheadContext(),\n      activeIndex = _useTypeaheadContext.activeIndex,\n      id = _useTypeaheadContext.id,\n      isOnlyResult = _useTypeaheadContext.isOnlyResult,\n      onActiveItemChange = _useTypeaheadContext.onActiveItemChange,\n      onInitialItemChange = _useTypeaheadContext.onInitialItemChange,\n      onMenuItemClick = _useTypeaheadContext.onMenuItemClick,\n      setItem = _useTypeaheadContext.setItem;\n\n  var itemRef = useRef(null);\n  useEffect(function () {\n    if (position === 0) {\n      onInitialItemChange(option);\n    }\n  });\n  useEffect(function () {\n    if (position === activeIndex) {\n      onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n      var node = itemRef.current;\n      node && scrollIntoView(node, {\n        block: 'nearest',\n        boundary: node.parentNode,\n        inline: 'nearest',\n        scrollMode: 'if-needed'\n      });\n    }\n  });\n  var handleClick = useCallback(function (e) {\n    onMenuItemClick(option, e);\n    onClick && onClick(e);\n  }, [onClick, onMenuItemClick, option]);\n  var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack.\n\n  setItem(option, position);\n  return _objectSpread(_objectSpread({}, props), {}, {\n    active: active,\n    'aria-label': label,\n    'aria-selected': active,\n    id: getMenuItemId(id, position),\n    onClick: handleClick,\n    onMouseDown: preventInputBlur,\n    ref: itemRef,\n    role: 'option'\n  });\n}\n/* istanbul ignore next */\n\nexport function withItem(Component) {\n  var WrappedMenuItem = function WrappedMenuItem(props) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, useItem(props)));\n  };\n\n  WrappedMenuItem.displayName = \"withItem(\".concat(getDisplayName(Component), \")\");\n  WrappedMenuItem.propTypes = propTypes;\n  return WrappedMenuItem;\n}","map":null,"metadata":{},"sourceType":"module"}