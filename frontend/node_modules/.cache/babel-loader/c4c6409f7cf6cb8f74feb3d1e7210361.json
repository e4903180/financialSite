{"ast":null,"code":"/*\n Highstock JS v10.2.1 (2022-08-29)\n\n Advanced Highcharts Stock tools\n\n (c) 2010-2021 Highsoft AS\n Author: Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function (b) {\n  \"object\" === typeof module && module.exports ? (b[\"default\"] = b, module.exports = b) : \"function\" === typeof define && define.amd ? define(\"highcharts/modules/stock-tools\", [\"highcharts\", \"highcharts/modules/stock\"], function (r) {\n    b(r);\n    b.Highcharts = r;\n    return b;\n  }) : b(\"undefined\" !== typeof Highcharts ? Highcharts : void 0);\n})(function (b) {\n  function r(b, n, m, q) {\n    b.hasOwnProperty(n) || (b[n] = q.apply(null, m), \"function\" === typeof CustomEvent && window.dispatchEvent(new CustomEvent(\"HighchartsModuleLoaded\", {\n      detail: {\n        path: n,\n        module: b[n]\n      }\n    })));\n  }\n\n  b = b ? b._modules : {};\n  r(b, \"Core/Chart/ChartNavigationComposition.js\", [], function () {\n    var b;\n\n    (function (b) {\n      b.compose = function (b) {\n        b.navigation || (b.navigation = new m(b));\n        return b;\n      };\n\n      var m = function () {\n        function b(b) {\n          this.updates = [];\n          this.chart = b;\n        }\n\n        b.prototype.addUpdate = function (b) {\n          this.chart.navigation.updates.push(b);\n        };\n\n        b.prototype.update = function (b, h) {\n          var d = this;\n          this.updates.forEach(function (H) {\n            H.call(d.chart, b, h);\n          });\n        };\n\n        return b;\n      }();\n\n      b.Additions = m;\n    })(b || (b = {}));\n\n    return b;\n  });\n  r(b, \"Extensions/Annotations/NavigationBindingsUtilities.js\", [b[\"Core/Utilities.js\"]], function (b) {\n    var n = b.defined,\n        m = b.isNumber,\n        q = b.pick,\n        f = {\n      backgroundColor: \"string\",\n      borderColor: \"string\",\n      borderRadius: \"string\",\n      color: \"string\",\n      fill: \"string\",\n      fontSize: \"string\",\n      labels: \"string\",\n      name: \"string\",\n      stroke: \"string\",\n      title: \"string\"\n    };\n    return {\n      annotationsFieldsTypes: f,\n      getAssignedAxis: function getAssignedAxis(b) {\n        return b.filter(function (d) {\n          var b = d.axis.getExtremes(),\n              h = b.min;\n          b = b.max;\n          var f = q(d.axis.minPointOffset, 0);\n          return m(h) && m(b) && d.value >= h - f && d.value <= b + f && !d.axis.options.isInternal;\n        })[0];\n      },\n      getFieldType: function getFieldType(b, d) {\n        b = f[b];\n        d = typeof d;\n        n(b) && (d = b);\n        return {\n          string: \"text\",\n          number: \"number\",\n          \"boolean\": \"checkbox\"\n        }[d];\n      }\n    };\n  });\n  r(b, \"Extensions/Annotations/NavigationBindingsDefaults.js\", [b[\"Extensions/Annotations/NavigationBindingsUtilities.js\"], b[\"Core/Utilities.js\"]], function (b, n) {\n    var m = b.getAssignedAxis,\n        q = n.isNumber,\n        f = n.merge;\n    return {\n      lang: {\n        navigation: {\n          popup: {\n            simpleShapes: \"Simple shapes\",\n            lines: \"Lines\",\n            circle: \"Circle\",\n            ellipse: \"Ellipse\",\n            rectangle: \"Rectangle\",\n            label: \"Label\",\n            shapeOptions: \"Shape options\",\n            typeOptions: \"Details\",\n            fill: \"Fill\",\n            format: \"Text\",\n            strokeWidth: \"Line width\",\n            stroke: \"Line color\",\n            title: \"Title\",\n            name: \"Name\",\n            labelOptions: \"Label options\",\n            labels: \"Labels\",\n            backgroundColor: \"Background color\",\n            backgroundColors: \"Background colors\",\n            borderColor: \"Border color\",\n            borderRadius: \"Border radius\",\n            borderWidth: \"Border width\",\n            style: \"Style\",\n            padding: \"Padding\",\n            fontSize: \"Font size\",\n            color: \"Color\",\n            height: \"Height\",\n            shapes: \"Shape options\"\n          }\n        }\n      },\n      navigation: {\n        bindingsClassName: \"highcharts-bindings-container\",\n        bindings: {\n          circleAnnotation: {\n            className: \"highcharts-circle-annotation\",\n            start: function start(b) {\n              var d = this.chart.pointer.getCoordinates(b);\n              b = m(d.xAxis);\n              d = m(d.yAxis);\n              var h = this.chart.options.navigation;\n              if (b && d) return this.chart.addAnnotation(f({\n                langKey: \"circle\",\n                type: \"basicAnnotation\",\n                shapes: [{\n                  type: \"circle\",\n                  point: {\n                    x: b.value,\n                    y: d.value,\n                    xAxis: b.axis.options.index,\n                    yAxis: d.axis.options.index\n                  },\n                  r: 5\n                }]\n              }, h.annotationsOptions, h.bindings.circleAnnotation.annotationsOptions));\n            },\n            steps: [function (b, d) {\n              var h = d.options.shapes;\n              h = h && h[0] && h[0].point || {};\n\n              if (q(h.xAxis) && q(h.yAxis)) {\n                var f = this.chart.inverted;\n                var m = this.chart.xAxis[h.xAxis].toPixels(h.x);\n                h = this.chart.yAxis[h.yAxis].toPixels(h.y);\n                f = Math.max(Math.sqrt(Math.pow(f ? h - b.chartX : m - b.chartX, 2) + Math.pow(f ? m - b.chartY : h - b.chartY, 2)), 5);\n              }\n\n              d.update({\n                shapes: [{\n                  r: f\n                }]\n              });\n            }]\n          },\n          ellipseAnnotation: {\n            className: \"highcharts-ellipse-annotation\",\n            start: function start(b) {\n              var d = this.chart.pointer.getCoordinates(b);\n              b = m(d.xAxis);\n              d = m(d.yAxis);\n              var h = this.chart.options.navigation;\n              if (b && d) return this.chart.addAnnotation(f({\n                langKey: \"ellipse\",\n                type: \"basicAnnotation\",\n                shapes: [{\n                  type: \"ellipse\",\n                  xAxis: b.axis.options.index,\n                  yAxis: d.axis.options.index,\n                  points: [{\n                    x: b.value,\n                    y: d.value\n                  }, {\n                    x: b.value,\n                    y: d.value\n                  }],\n                  ry: 1\n                }]\n              }, h.annotationsOptions, h.bindings.ellipseAnnotation.annotationOptions));\n            },\n            steps: [function (b, d) {\n              d = d.shapes[0];\n              var h = d.getAbsolutePosition(d.points[1]);\n              d.translatePoint(b.chartX - h.x, b.chartY - h.y, 1);\n              d.redraw(!1);\n            }, function (b, d) {\n              d = d.shapes[0];\n              var f = d.getAbsolutePosition(d.points[0]),\n                  h = d.getAbsolutePosition(d.points[1]);\n              b = d.getDistanceFromLine(f, h, b.chartX, b.chartY);\n              f = d.getYAxis();\n              b = Math.abs(f.toValue(0) - f.toValue(b));\n              d.setYRadius(b);\n              d.redraw(!1);\n            }]\n          },\n          rectangleAnnotation: {\n            className: \"highcharts-rectangle-annotation\",\n            start: function start(b) {\n              b = this.chart.pointer.getCoordinates(b);\n              var d = m(b.xAxis),\n                  h = m(b.yAxis);\n\n              if (d && h) {\n                b = d.value;\n                var n = h.value;\n                d = d.axis.options.index;\n                h = h.axis.options.index;\n                var x = this.chart.options.navigation;\n                return this.chart.addAnnotation(f({\n                  langKey: \"rectangle\",\n                  type: \"basicAnnotation\",\n                  shapes: [{\n                    type: \"path\",\n                    points: [{\n                      xAxis: d,\n                      yAxis: h,\n                      x: b,\n                      y: n\n                    }, {\n                      xAxis: d,\n                      yAxis: h,\n                      x: b,\n                      y: n\n                    }, {\n                      xAxis: d,\n                      yAxis: h,\n                      x: b,\n                      y: n\n                    }, {\n                      xAxis: d,\n                      yAxis: h,\n                      x: b,\n                      y: n\n                    }, {\n                      command: \"Z\"\n                    }]\n                  }]\n                }, x.annotationsOptions, x.bindings.rectangleAnnotation.annotationsOptions));\n              }\n            },\n            steps: [function (b, d) {\n              var f = d.options.shapes;\n              f = f && f[0] && f[0].points || [];\n              var h = this.chart.pointer.getCoordinates(b);\n              b = m(h.xAxis);\n              h = m(h.yAxis);\n              b && h && (b = b.value, h = h.value, f[1].x = b, f[2].x = b, f[2].y = h, f[3].y = h, d.update({\n                shapes: [{\n                  points: f\n                }]\n              }));\n            }]\n          },\n          labelAnnotation: {\n            className: \"highcharts-label-annotation\",\n            start: function start(b) {\n              var d = this.chart.pointer.getCoordinates(b);\n              b = m(d.xAxis);\n              d = m(d.yAxis);\n              var h = this.chart.options.navigation;\n              if (b && d) return this.chart.addAnnotation(f({\n                langKey: \"label\",\n                type: \"basicAnnotation\",\n                labelOptions: {\n                  format: \"{y:.2f}\"\n                },\n                labels: [{\n                  point: {\n                    xAxis: b.axis.options.index,\n                    yAxis: d.axis.options.index,\n                    x: b.value,\n                    y: d.value\n                  },\n                  overflow: \"none\",\n                  crop: !0\n                }]\n              }, h.annotationsOptions, h.bindings.labelAnnotation.annotationsOptions));\n            }\n          }\n        },\n        events: {},\n        annotationsOptions: {\n          animation: {\n            defer: 0\n          }\n        }\n      }\n    };\n  });\n  r(b, \"Extensions/Annotations/NavigationBindings.js\", [b[\"Core/Chart/ChartNavigationComposition.js\"], b[\"Core/DefaultOptions.js\"], b[\"Core/FormatUtilities.js\"], b[\"Core/Globals.js\"], b[\"Extensions/Annotations/NavigationBindingsDefaults.js\"], b[\"Extensions/Annotations/NavigationBindingsUtilities.js\"], b[\"Core/Utilities.js\"]], function (b, n, m, q, f, h, d) {\n    function w(a, c) {\n      var b = y.Element.prototype,\n          e = b.matches || b.msMatchesSelector || b.webkitMatchesSelector,\n          k = null;\n      if (b.closest) k = b.closest.call(a, c);else {\n        do {\n          if (e.call(a, c)) return a;\n          a = a.parentElement || a.parentNode;\n        } while (null !== a && 1 === a.nodeType);\n      }\n      return k;\n    }\n\n    function r() {\n      this.chart.navigationBindings && this.chart.navigationBindings.deselectAnnotation();\n    }\n\n    function x() {\n      this.navigationBindings && this.navigationBindings.destroy();\n    }\n\n    function g() {\n      var a = this.options;\n      a && a.navigation && a.navigation.bindings && (this.navigationBindings = new D(this, a.navigation), this.navigationBindings.initEvents(), this.navigationBindings.initUpdate());\n    }\n\n    function p() {\n      var a = this.navigationBindings;\n\n      if (this && a) {\n        var c = !1;\n        this.series.forEach(function (a) {\n          !a.options.isInternal && a.visible && (c = !0);\n        });\n\n        if (this.navigationBindings && this.navigationBindings.container && this.navigationBindings.container[0]) {\n          var b = this.navigationBindings.container[0];\n          z(a.boundClassNames, function (a, e) {\n            if (e = b.querySelectorAll(\".\" + e)) for (var k = 0; k < e.length; k++) {\n              var v = e[k],\n                  g = v.className;\n              \"normal\" === a.noDataState ? -1 !== g.indexOf(\"highcharts-disabled-btn\") && v.classList.remove(\"highcharts-disabled-btn\") : c ? -1 !== g.indexOf(\"highcharts-disabled-btn\") && v.classList.remove(\"highcharts-disabled-btn\") : -1 === g.indexOf(\"highcharts-disabled-btn\") && (v.className += \" highcharts-disabled-btn\");\n            }\n          });\n        }\n      }\n    }\n\n    function l() {\n      this.deselectAnnotation();\n    }\n\n    function a() {\n      this.selectedButtonElement = null;\n    }\n\n    function c(a) {\n      var c = a.prototype.defaultOptions.events && a.prototype.defaultOptions.events.click;\n      E(!0, a.prototype.defaultOptions.events, {\n        click: function click(a) {\n          var b = this,\n              e = b.chart.navigationBindings,\n              k = e.activeAnnotation;\n          c && c.call(b, a);\n          k !== b ? (e.deselectAnnotation(), e.activeAnnotation = b, b.setControlPointsVisibility(!0), B(e, \"showPopup\", {\n            annotation: b,\n            formType: \"annotation-toolbar\",\n            options: e.annotationToFields(b),\n            onSubmit: function onSubmit(a) {\n              if (\"remove\" === a.actionType) e.activeAnnotation = !1, e.chart.removeAnnotation(b);else {\n                var c = {};\n                e.fieldsToOptions(a.fields, c);\n                e.deselectAnnotation();\n                a = c.typeOptions;\n                \"measure\" === b.options.type && (a.crosshairY.enabled = 0 !== a.crosshairY.strokeWidth, a.crosshairX.enabled = 0 !== a.crosshairX.strokeWidth);\n                b.update(c);\n              }\n            }\n          })) : B(e, \"closePopup\");\n          a.activeAnnotation = !0;\n        }\n      });\n    }\n\n    var e = n.setOptions,\n        v = m.format,\n        t = q.doc,\n        y = q.win,\n        k = h.getFieldType,\n        u = d.addEvent,\n        I = d.attr,\n        B = d.fireEvent,\n        C = d.isArray,\n        J = d.isFunction,\n        K = d.isNumber,\n        F = d.isObject,\n        E = d.merge,\n        z = d.objectEach,\n        G = d.pick,\n        A = [],\n        D = function () {\n      function d(a, c) {\n        this.selectedButton = this.boundClassNames = void 0;\n        this.chart = a;\n        this.options = c;\n        this.eventsToUnbind = [];\n        this.container = this.chart.container.querySelectorAll(\".\" + this.options.bindingsClassName);\n        this.container.length || (this.container = t.querySelectorAll(\".\" + this.options.bindingsClassName));\n      }\n\n      d.compose = function (b, k) {\n        -1 === A.indexOf(b) && (A.push(b), u(b, \"remove\", r), c(b), z(b.types, function (a) {\n          c(a);\n        }));\n        -1 === A.indexOf(k) && (A.push(k), u(k, \"destroy\", x), u(k, \"load\", g), u(k, \"render\", p));\n        -1 === A.indexOf(d) && (A.push(d), u(d, \"closePopup\", l), u(d, \"deselectButton\", a));\n        -1 === A.indexOf(e) && (A.push(e), e(f));\n      };\n\n      d.prototype.initEvents = function () {\n        var a = this,\n            c = a.chart,\n            b = a.container,\n            e = a.options;\n        a.boundClassNames = {};\n        z(e.bindings || {}, function (c) {\n          a.boundClassNames[c.className] = c;\n        });\n        [].forEach.call(b, function (c) {\n          a.eventsToUnbind.push(u(c, \"click\", function (b) {\n            var e = a.getButtonEvents(c, b);\n            e && -1 === e.button.className.indexOf(\"highcharts-disabled-btn\") && a.bindingsButtonClick(e.button, e.events, b);\n          }));\n        });\n        z(e.events || {}, function (c, b) {\n          J(c) && a.eventsToUnbind.push(u(a, b, c, {\n            passive: !1\n          }));\n        });\n        a.eventsToUnbind.push(u(c.container, \"click\", function (b) {\n          !c.cancelClick && c.isInsidePlot(b.chartX - c.plotLeft, b.chartY - c.plotTop, {\n            visiblePlotOnly: !0\n          }) && a.bindingsChartClick(this, b);\n        }));\n        a.eventsToUnbind.push(u(c.container, q.isTouchDevice ? \"touchmove\" : \"mousemove\", function (c) {\n          a.bindingsContainerMouseMove(this, c);\n        }, q.isTouchDevice ? {\n          passive: !1\n        } : void 0));\n      };\n\n      d.prototype.initUpdate = function () {\n        var a = this;\n        b.compose(this.chart).navigation.addUpdate(function (c) {\n          a.update(c);\n        });\n      };\n\n      d.prototype.bindingsButtonClick = function (a, c, b) {\n        var e = this.chart,\n            k = e.renderer.boxWrapper,\n            d = !0;\n        this.selectedButtonElement && (this.selectedButtonElement.classList === a.classList && (d = !1), B(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        }), this.nextEvent && (this.currentUserDetails && \"annotations\" === this.currentUserDetails.coll && e.removeAnnotation(this.currentUserDetails), this.mouseMoveEvent = this.nextEvent = !1));\n        d ? (this.selectedButton = c, this.selectedButtonElement = a, B(this, \"selectButton\", {\n          button: a\n        }), c.init && c.init.call(this, a, b), (c.start || c.steps) && e.renderer.boxWrapper.addClass(\"highcharts-draw-mode\")) : (e.stockTools && e.stockTools.toggleButtonActiveClass(a), k.removeClass(\"highcharts-draw-mode\"), this.mouseMoveEvent = this.nextEvent = !1, this.selectedButton = null);\n      };\n\n      d.prototype.bindingsChartClick = function (a, c) {\n        a = this.chart;\n        var b = this.activeAnnotation,\n            e = this.selectedButton;\n        a = a.renderer.boxWrapper;\n        b && (b.cancelClick || c.activeAnnotation || !c.target.parentNode || w(c.target, \".highcharts-popup\") ? b.cancelClick && setTimeout(function () {\n          b.cancelClick = !1;\n        }, 0) : B(this, \"closePopup\"));\n        e && e.start && (this.nextEvent ? (this.nextEvent(c, this.currentUserDetails), this.steps && (this.stepIndex++, e.steps[this.stepIndex] ? this.mouseMoveEvent = this.nextEvent = e.steps[this.stepIndex] : (B(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        }), a.removeClass(\"highcharts-draw-mode\"), e.end && e.end.call(this, c, this.currentUserDetails), this.mouseMoveEvent = this.nextEvent = !1, this.selectedButton = null))) : (this.currentUserDetails = e.start.call(this, c)) && e.steps ? (this.stepIndex = 0, this.steps = !0, this.mouseMoveEvent = this.nextEvent = e.steps[this.stepIndex]) : (B(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        }), a.removeClass(\"highcharts-draw-mode\"), this.steps = !1, this.selectedButton = null, e.end && e.end.call(this, c, this.currentUserDetails)));\n      };\n\n      d.prototype.bindingsContainerMouseMove = function (a, c) {\n        this.mouseMoveEvent && this.mouseMoveEvent(c, this.currentUserDetails);\n      };\n\n      d.prototype.fieldsToOptions = function (a, c) {\n        z(a, function (a, b) {\n          var e = parseFloat(a),\n              k = b.split(\".\"),\n              d = k.length - 1;\n          !K(e) || a.match(/px/g) || b.match(/format/g) || (a = e);\n\n          if (\"undefined\" !== a) {\n            var v = c;\n            k.forEach(function (c, b) {\n              var e = G(k[b + 1], \"\");\n              d === b ? v[c] = a : (v[c] || (v[c] = e.match(/\\d/g) ? [] : {}), v = v[c]);\n            });\n          }\n        });\n        return c;\n      };\n\n      d.prototype.deselectAnnotation = function () {\n        this.activeAnnotation && (this.activeAnnotation.setControlPointsVisibility(!1), this.activeAnnotation = !1);\n      };\n\n      d.prototype.annotationToFields = function (a) {\n        function c(b, e, d, t, l) {\n          if (d && b && -1 === f.indexOf(e) && (0 <= (d.indexOf && d.indexOf(e)) || d[e] || !0 === d)) if (C(b)) t[e] = [], b.forEach(function (a, b) {\n            F(a) ? (t[e][b] = {}, z(a, function (a, k) {\n              c(a, k, g[e], t[e][b], e);\n            })) : c(a, 0, g[e], t[e], e);\n          });else if (F(b)) {\n            var u = {};\n            C(t) ? (t.push(u), u[e] = {}, u = u[e]) : t[e] = u;\n            z(b, function (a, b) {\n              c(a, b, 0 === e ? d : g[e], u, e);\n            });\n          } else \"format\" === e ? t[e] = [v(b, a.labels[0].points[0]).toString(), \"text\"] : C(t) ? t.push([b, k(l, b)]) : t[e] = [b, k(e, b)];\n        }\n\n        var b = a.options,\n            e = d.annotationsEditable,\n            g = e.nestedOptions,\n            t = G(b.type, b.shapes && b.shapes[0] && b.shapes[0].type, b.labels && b.labels[0] && b.labels[0].type, \"label\"),\n            f = d.annotationsNonEditable[b.langKey] || [],\n            l = {\n          langKey: b.langKey,\n          type: t\n        };\n        z(b, function (a, k) {\n          \"typeOptions\" === k ? (l[k] = {}, z(b[k], function (a, b) {\n            c(a, b, g, l[k], b);\n          })) : c(a, k, e[t], l, k);\n        });\n        return l;\n      };\n\n      d.prototype.getClickedClassNames = function (a, c) {\n        var b = c.target;\n        c = [];\n\n        for (var e; b && ((e = I(b, \"class\")) && (c = c.concat(e.split(\" \").map(function (a) {\n          return [a, b];\n        }))), b = b.parentNode, b !== a);) {\n          ;\n        }\n\n        return c;\n      };\n\n      d.prototype.getButtonEvents = function (a, c) {\n        var b = this,\n            e;\n        this.getClickedClassNames(a, c).forEach(function (a) {\n          b.boundClassNames[a[0]] && !e && (e = {\n            events: b.boundClassNames[a[0]],\n            button: a[1]\n          });\n        });\n        return e;\n      };\n\n      d.prototype.update = function (a) {\n        this.options = E(!0, this.options, a);\n        this.removeEvents();\n        this.initEvents();\n      };\n\n      d.prototype.removeEvents = function () {\n        this.eventsToUnbind.forEach(function (a) {\n          return a();\n        });\n      };\n\n      d.prototype.destroy = function () {\n        this.removeEvents();\n      };\n\n      d.annotationsEditable = {\n        nestedOptions: {\n          labelOptions: [\"style\", \"format\", \"backgroundColor\"],\n          labels: [\"style\"],\n          label: [\"style\"],\n          style: [\"fontSize\", \"color\"],\n          background: [\"fill\", \"strokeWidth\", \"stroke\"],\n          innerBackground: [\"fill\", \"strokeWidth\", \"stroke\"],\n          outerBackground: [\"fill\", \"strokeWidth\", \"stroke\"],\n          shapeOptions: [\"fill\", \"strokeWidth\", \"stroke\"],\n          shapes: [\"fill\", \"strokeWidth\", \"stroke\"],\n          line: [\"strokeWidth\", \"stroke\"],\n          backgroundColors: [!0],\n          connector: [\"fill\", \"strokeWidth\", \"stroke\"],\n          crosshairX: [\"strokeWidth\", \"stroke\"],\n          crosshairY: [\"strokeWidth\", \"stroke\"]\n        },\n        circle: [\"shapes\"],\n        ellipse: [\"shapes\"],\n        verticalLine: [],\n        label: [\"labelOptions\"],\n        measure: [\"background\", \"crosshairY\", \"crosshairX\"],\n        fibonacci: [],\n        tunnel: [\"background\", \"line\", \"height\"],\n        pitchfork: [\"innerBackground\", \"outerBackground\"],\n        rect: [\"shapes\"],\n        crookedLine: [],\n        basicAnnotation: [\"shapes\", \"labelOptions\"]\n      };\n      d.annotationsNonEditable = {\n        rectangle: [\"crosshairX\", \"crosshairY\", \"labelOptions\"],\n        ellipse: [\"labelOptions\"],\n        circle: [\"labelOptions\"]\n      };\n      return d;\n    }();\n\n    \"\";\n    return D;\n  });\n  r(b, \"Stock/StockToolsUtilities.js\", [b[\"Core/DefaultOptions.js\"], b[\"Extensions/Annotations/NavigationBindingsUtilities.js\"], b[\"Core/Series/Series.js\"], b[\"Core/Utilities.js\"]], function (b, n, m, q) {\n    function f(a, b) {\n      a = b.pointer.getCoordinates(a);\n      var c = Number.MAX_VALUE,\n          e;\n\n      if (b.navigationBindings) {\n        var g = d(a.xAxis);\n        var k = d(a.yAxis);\n      }\n\n      if (g && k) {\n        var f = g.value;\n        b = k.value;\n        k.axis.series.forEach(function (a) {\n          a.points && a.points.forEach(function (a) {\n            a && c > Math.abs(a.x - f) && (c = Math.abs(a.x - f), e = a);\n          });\n        });\n        if (e && e.x && e.y) return {\n          x: e.x,\n          y: e.y,\n          below: b < e.y,\n          series: e.series,\n          xAxis: e.series.xAxis.options.index || 0,\n          yAxis: e.series.yAxis.options.index || 0\n        };\n      }\n    }\n\n    var h = b.getOptions,\n        d = n.getAssignedAxis,\n        w = n.getFieldType,\n        r = q.defined,\n        x = q.fireEvent,\n        g = q.isNumber,\n        p = q.uniqueKey,\n        l = \"apo ad aroon aroonoscillator atr ao cci chaikin cmf cmo disparityindex dmi dpo linearRegressionAngle linearRegressionIntercept linearRegressionSlope klinger macd mfi momentum natr obv ppo roc rsi slowstochastic stochastic trix williamsr\".split(\" \"),\n        a = \"ad cmf klinger mfi obv vbp vwap\".split(\" \");\n    return {\n      indicatorsWithAxes: l,\n      indicatorsWithVolume: a,\n      addFlagFromForm: function addFlagFromForm(a) {\n        return function (c) {\n          var b = this,\n              e = b.chart,\n              d = e.stockTools;\n\n          if (c = f(c, e)) {\n            var k = {\n              type: \"flags\",\n              onSeries: c.series.id,\n              shape: a,\n              data: [{\n                x: c.x,\n                y: c.y\n              }],\n              xAxis: c.xAxis,\n              yAxis: c.yAxis,\n              point: {\n                events: {\n                  click: function click() {\n                    var a = this,\n                        c = a.options;\n                    x(b, \"showPopup\", {\n                      point: a,\n                      formType: \"annotation-toolbar\",\n                      options: {\n                        langKey: \"flags\",\n                        type: \"flags\",\n                        title: [c.title, w(\"title\", c.title)],\n                        name: [c.name, w(\"name\", c.name)]\n                      },\n                      onSubmit: function onSubmit(c) {\n                        \"remove\" === c.actionType ? a.remove() : a.update(b.fieldsToOptions(c.fields, {}));\n                      }\n                    });\n                  }\n                }\n              }\n            };\n            d && d.guiEnabled || e.addSeries(k);\n            x(b, \"showPopup\", {\n              formType: \"flag\",\n              options: {\n                langKey: \"flags\",\n                type: \"flags\",\n                title: [\"A\", w(\"label\", \"A\")],\n                name: [\"Flag A\", w(\"label\", \"Flag A\")]\n              },\n              onSubmit: function onSubmit(a) {\n                b.fieldsToOptions(a.fields, k.data[0]);\n                e.addSeries(k);\n              }\n            });\n          }\n        };\n      },\n      attractToPoint: f,\n      getAssignedAxis: d,\n      isNotNavigatorYAxis: function isNotNavigatorYAxis(a) {\n        return \"highcharts-navigator-yaxis\" !== a.userOptions.className;\n      },\n      isPriceIndicatorEnabled: function isPriceIndicatorEnabled(a) {\n        return a.some(function (a) {\n          return a.lastVisiblePrice || a.lastPrice;\n        });\n      },\n      manageIndicators: function manageIndicators(c) {\n        var b = this.chart,\n            d = {\n          linkedTo: c.linkedTo,\n          type: c.type\n        };\n        if (\"edit\" === c.actionType) this.fieldsToOptions(c.fields, d), (c = b.get(c.seriesId)) && c.update(d, !1);else if (\"remove\" === c.actionType) {\n          if (c = b.get(c.seriesId)) {\n            var g = c.yAxis;\n            c.linkedSeries && c.linkedSeries.forEach(function (a) {\n              a.remove(!1);\n            });\n            c.remove(!1);\n            0 <= l.indexOf(c.type) && (d = {\n              height: g.options.height,\n              top: g.options.top\n            }, g.remove(!1), this.resizeYAxes(d));\n          }\n        } else {\n          d.id = p();\n          this.fieldsToOptions(c.fields, d);\n          g = b.get(d.linkedTo);\n          var f = h().plotOptions;\n          \"undefined\" !== typeof g && g instanceof m && \"sum\" === g.getDGApproximation() && !r(f && f[d.type] && f.dataGrouping && f.dataGrouping.approximation) && (d.dataGrouping = {\n            approximation: \"sum\"\n          });\n          0 <= l.indexOf(c.type) ? (g = b.addAxis({\n            id: p(),\n            offset: 0,\n            opposite: !0,\n            title: {\n              text: \"\"\n            },\n            tickPixelInterval: 40,\n            showLastLabel: !1,\n            labels: {\n              align: \"left\",\n              y: -2\n            }\n          }, !1, !1), d.yAxis = g.options.id, this.resizeYAxes()) : d.yAxis = b.get(c.linkedTo).options.yAxis;\n          0 <= a.indexOf(c.type) && (d.params.volumeSeriesID = b.series.filter(function (a) {\n            return \"column\" === a.options.type;\n          })[0].options.id);\n          b.addSeries(d, !1);\n        }\n        x(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        });\n        b.redraw();\n      },\n      updateHeight: function updateHeight(a, b) {\n        var c = b.options.typeOptions,\n            e = g(c.yAxis) && this.chart.yAxis[c.yAxis];\n        e && c.points && b.update({\n          typeOptions: {\n            height: e.toValue(a[e.horiz ? \"chartX\" : \"chartY\"]) - (c.points[1].y || 0)\n          }\n        });\n      },\n      updateNthPoint: function updateNthPoint(a) {\n        return function (c, b) {\n          var e = b.options.typeOptions,\n              d = g(e.xAxis) && this.chart.xAxis[e.xAxis],\n              k = g(e.yAxis) && this.chart.yAxis[e.yAxis];\n          d && k && (e.points.forEach(function (b, e) {\n            e >= a && (b.x = d.toValue(c[d.horiz ? \"chartX\" : \"chartY\"]), b.y = k.toValue(c[k.horiz ? \"chartX\" : \"chartY\"]));\n          }), b.update({\n            typeOptions: {\n              points: e.points\n            }\n          }));\n        };\n      },\n      updateRectSize: function updateRectSize(a, b) {\n        var c = b.chart,\n            e = b.options.typeOptions,\n            d = g(e.xAxis) && c.xAxis[e.xAxis],\n            k = g(e.yAxis) && c.yAxis[e.yAxis];\n        d && k && (d = d.toValue(a[d.horiz ? \"chartX\" : \"chartY\"]), a = k.toValue(a[k.horiz ? \"chartX\" : \"chartY\"]), k = d - e.point.x, e = e.point.y - a, b.update({\n          typeOptions: {\n            background: {\n              width: c.inverted ? e : k,\n              height: c.inverted ? k : e\n            }\n          }\n        }));\n      }\n    };\n  });\n  r(b, \"Stock/StockToolsBindings.js\", [b[\"Core/Globals.js\"], b[\"Extensions/Annotations/NavigationBindingsUtilities.js\"], b[\"Stock/StockToolsUtilities.js\"], b[\"Core/Utilities.js\"]], function (b, n, m, q) {\n    var f = n.getAssignedAxis;\n    n = m.addFlagFromForm;\n    var h = m.attractToPoint,\n        d = m.isNotNavigatorYAxis,\n        w = m.isPriceIndicatorEnabled,\n        r = m.manageIndicators,\n        x = m.updateHeight,\n        g = m.updateNthPoint;\n    m = m.updateRectSize;\n    var p = q.fireEvent,\n        l = q.merge;\n    return {\n      segment: {\n        className: \"highcharts-segment\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"segment\",\n              type: \"crookedLine\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }, {\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.segment.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1)]\n      },\n      arrowSegment: {\n        className: \"highcharts-arrow-segment\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"arrowSegment\",\n              type: \"crookedLine\",\n              typeOptions: {\n                line: {\n                  markerEnd: \"arrow\"\n                },\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }, {\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.arrowSegment.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1)]\n      },\n      ray: {\n        className: \"highcharts-ray\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"ray\",\n              type: \"infinityLine\",\n              typeOptions: {\n                type: \"ray\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }, {\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.ray.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1)]\n      },\n      arrowRay: {\n        className: \"highcharts-arrow-ray\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"arrowRay\",\n              type: \"infinityLine\",\n              typeOptions: {\n                type: \"ray\",\n                line: {\n                  markerEnd: \"arrow\"\n                },\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }, {\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.arrowRay.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1)]\n      },\n      infinityLine: {\n        className: \"highcharts-infinity-line\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"infinityLine\",\n              type: \"infinityLine\",\n              typeOptions: {\n                type: \"line\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }, {\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.infinityLine.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1)]\n      },\n      arrowInfinityLine: {\n        className: \"highcharts-arrow-infinity-line\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"arrowInfinityLine\",\n              type: \"infinityLine\",\n              typeOptions: {\n                type: \"line\",\n                line: {\n                  markerEnd: \"arrow\"\n                },\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }, {\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.arrowInfinityLine.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1)]\n      },\n      horizontalLine: {\n        className: \"highcharts-horizontal-line\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"horizontalLine\",\n              type: \"infinityLine\",\n              draggable: \"y\",\n              typeOptions: {\n                type: \"horizontalLine\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.horizontalLine.annotationsOptions);\n            this.chart.addAnnotation(a);\n          }\n        }\n      },\n      verticalLine: {\n        className: \"highcharts-vertical-line\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"verticalLine\",\n              type: \"infinityLine\",\n              draggable: \"x\",\n              typeOptions: {\n                type: \"verticalLine\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.verticalLine.annotationsOptions);\n            this.chart.addAnnotation(a);\n          }\n        }\n      },\n      crooked3: {\n        className: \"highcharts-crooked3\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"crooked3\",\n              type: \"crookedLine\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }]\n              }\n            }, g.annotationsOptions, g.bindings.crooked3.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), g(2)]\n      },\n      crooked5: {\n        className: \"highcharts-crooked5\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"crooked5\",\n              type: \"crookedLine\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }]\n              }\n            }, g.annotationsOptions, g.bindings.crooked5.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), g(2), g(3), g(4)]\n      },\n      elliott3: {\n        className: \"highcharts-elliott3\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"elliott3\",\n              type: \"elliottWave\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }]\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\"\n                }\n              }\n            }, g.annotationsOptions, g.bindings.elliott3.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), g(2), g(3)]\n      },\n      elliott5: {\n        className: \"highcharts-elliott5\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"elliott5\",\n              type: \"elliottWave\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }]\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\"\n                }\n              }\n            }, g.annotationsOptions, g.bindings.elliott5.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), g(2), g(3), g(4), g(5)]\n      },\n      measureX: {\n        className: \"highcharts-measure-x\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"measure\",\n              type: \"measure\",\n              typeOptions: {\n                selectType: \"x\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                point: {\n                  x: a.value,\n                  y: c.value\n                },\n                crosshairX: {\n                  strokeWidth: 1,\n                  stroke: \"#000000\"\n                },\n                crosshairY: {\n                  enabled: !1,\n                  strokeWidth: 0,\n                  stroke: \"#000000\"\n                },\n                background: {\n                  width: 0,\n                  height: 0,\n                  strokeWidth: 0,\n                  stroke: \"#ffffff\"\n                }\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\"\n                }\n              }\n            }, b.annotationsOptions, b.bindings.measureX.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [m]\n      },\n      measureY: {\n        className: \"highcharts-measure-y\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"measure\",\n              type: \"measure\",\n              typeOptions: {\n                selectType: \"y\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                point: {\n                  x: a.value,\n                  y: c.value\n                },\n                crosshairX: {\n                  enabled: !1,\n                  strokeWidth: 0,\n                  stroke: \"#000000\"\n                },\n                crosshairY: {\n                  strokeWidth: 1,\n                  stroke: \"#000000\"\n                },\n                background: {\n                  width: 0,\n                  height: 0,\n                  strokeWidth: 0,\n                  stroke: \"#ffffff\"\n                }\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\"\n                }\n              }\n            }, b.annotationsOptions, b.bindings.measureY.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [m]\n      },\n      measureXY: {\n        className: \"highcharts-measure-xy\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              langKey: \"measure\",\n              type: \"measure\",\n              typeOptions: {\n                selectType: \"xy\",\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                point: {\n                  x: a.value,\n                  y: c.value\n                },\n                background: {\n                  width: 0,\n                  height: 0,\n                  strokeWidth: 10\n                },\n                crosshairX: {\n                  strokeWidth: 1,\n                  stroke: \"#000000\"\n                },\n                crosshairY: {\n                  strokeWidth: 1,\n                  stroke: \"#000000\"\n                }\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\"\n                }\n              }\n            }, b.annotationsOptions, b.bindings.measureXY.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [m]\n      },\n      fibonacci: {\n        className: \"highcharts-fibonacci\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"fibonacci\",\n              type: \"fibonacci\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }]\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\"\n                }\n              }\n            }, g.annotationsOptions, g.bindings.fibonacci.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), x]\n      },\n      parallelChannel: {\n        className: \"highcharts-parallel-channel\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"parallelChannel\",\n              type: \"tunnel\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }]\n              }\n            }, g.annotationsOptions, g.bindings.parallelChannel.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), x]\n      },\n      pitchfork: {\n        className: \"highcharts-pitchfork\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = a.value,\n                d = c.value,\n                g = this.chart.options.navigation;\n            a = l({\n              langKey: \"pitchfork\",\n              type: \"pitchfork\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value,\n                  y: c.value,\n                  controlPoint: {\n                    style: {\n                      fill: \"#f21313\"\n                    }\n                  }\n                }, {\n                  x: b,\n                  y: d\n                }, {\n                  x: b,\n                  y: d\n                }],\n                innerBackground: {\n                  fill: \"rgba(100, 170, 255, 0.8)\"\n                }\n              },\n              shapeOptions: {\n                strokeWidth: 2\n              }\n            }, g.annotationsOptions, g.bindings.pitchfork.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [g(1), g(2)]\n      },\n      verticalCounter: {\n        className: \"highcharts-vertical-counter\",\n        start: function start(a) {\n          if (a = h(a, this.chart)) {\n            this.verticalCounter = this.verticalCounter || 0;\n            var c = this.chart.options.navigation;\n            a = l({\n              langKey: \"verticalCounter\",\n              type: \"verticalLine\",\n              typeOptions: {\n                point: {\n                  x: a.x,\n                  y: a.y,\n                  xAxis: a.xAxis,\n                  yAxis: a.yAxis\n                },\n                label: {\n                  offset: a.below ? 40 : -40,\n                  text: this.verticalCounter.toString()\n                }\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\",\n                  fontSize: \"11px\"\n                }\n              },\n              shapeOptions: {\n                stroke: \"rgba(0, 0, 0, 0.75)\",\n                strokeWidth: 1\n              }\n            }, c.annotationsOptions, c.bindings.verticalCounter.annotationsOptions);\n            a = this.chart.addAnnotation(a);\n            this.verticalCounter++;\n            a.options.events.click.call(a, {});\n          }\n        }\n      },\n      timeCycles: {\n        className: \"highcharts-time-cycles\",\n        start: function start(a) {\n          if (a = h(a, this.chart)) {\n            var c = this.chart.options.navigation;\n            a = l({\n              langKey: \"timeCycles\",\n              type: \"timeCycles\",\n              typeOptions: {\n                xAxis: a.xAxis,\n                yAxis: a.yAxis,\n                points: [{\n                  x: a.x\n                }, {\n                  x: a.x\n                }],\n                line: {\n                  stroke: \"rgba(0, 0, 0, 0.75)\",\n                  fill: \"transparent\",\n                  strokeWidth: 2\n                }\n              }\n            }, c.annotationsOptions, c.bindings.timeCycles.annotationsOptions);\n            a = this.chart.addAnnotation(a);\n            a.options.events.click.call(a, {});\n            return a;\n          }\n        },\n        steps: [g(1)]\n      },\n      verticalLabel: {\n        className: \"highcharts-vertical-label\",\n        start: function start(a) {\n          if (a = h(a, this.chart)) {\n            var c = this.chart.options.navigation;\n            a = l({\n              langKey: \"verticalLabel\",\n              type: \"verticalLine\",\n              typeOptions: {\n                point: {\n                  x: a.x,\n                  y: a.y,\n                  xAxis: a.xAxis,\n                  yAxis: a.yAxis\n                },\n                label: {\n                  offset: a.below ? 40 : -40\n                }\n              },\n              labelOptions: {\n                style: {\n                  color: \"#666666\",\n                  fontSize: \"11px\"\n                }\n              },\n              shapeOptions: {\n                stroke: \"rgba(0, 0, 0, 0.75)\",\n                strokeWidth: 1\n              }\n            }, c.annotationsOptions, c.bindings.verticalLabel.annotationsOptions);\n            a = this.chart.addAnnotation(a);\n            a.options.events.click.call(a, {});\n          }\n        }\n      },\n      verticalArrow: {\n        className: \"highcharts-vertical-arrow\",\n        start: function start(a) {\n          if (a = h(a, this.chart)) {\n            var c = this.chart.options.navigation;\n            a = l({\n              langKey: \"verticalArrow\",\n              type: \"verticalLine\",\n              typeOptions: {\n                point: {\n                  x: a.x,\n                  y: a.y,\n                  xAxis: a.xAxis,\n                  yAxis: a.yAxis\n                },\n                label: {\n                  offset: a.below ? 40 : -40,\n                  format: \" \"\n                },\n                connector: {\n                  fill: \"none\",\n                  stroke: a.below ? \"#f21313\" : \"#06b535\"\n                }\n              },\n              shapeOptions: {\n                stroke: \"rgba(0, 0, 0, 0.75)\",\n                strokeWidth: 1\n              }\n            }, c.annotationsOptions, c.bindings.verticalArrow.annotationsOptions);\n            a = this.chart.addAnnotation(a);\n            a.options.events.click.call(a, {});\n          }\n        }\n      },\n      fibonacciTimeZones: {\n        className: \"highcharts-fibonacci-time-zones\",\n        start: function start(a) {\n          var c = this.chart.pointer.getCoordinates(a);\n          a = f(c.xAxis);\n          c = f(c.yAxis);\n\n          if (a && c) {\n            var b = this.chart.options.navigation;\n            a = l({\n              type: \"fibonacciTimeZones\",\n              langKey: \"fibonacciTimeZones\",\n              typeOptions: {\n                xAxis: a.axis.options.index,\n                yAxis: c.axis.options.index,\n                points: [{\n                  x: a.value\n                }]\n              }\n            }, b.annotationsOptions, b.bindings.fibonacciTimeZones.annotationsOptions);\n            return this.chart.addAnnotation(a);\n          }\n        },\n        steps: [function (a, c) {\n          var b = c.options.typeOptions.points;\n          b = b && b[0].x;\n          var d = this.chart.pointer.getCoordinates(a);\n          a = f(d.xAxis);\n          d = f(d.yAxis);\n          c.update({\n            typeOptions: {\n              xAxis: a.axis.options.index,\n              yAxis: d.axis.options.index,\n              points: [{\n                x: b\n              }, {\n                x: a.value\n              }]\n            }\n          });\n        }]\n      },\n      flagCirclepin: {\n        className: \"highcharts-flag-circlepin\",\n        start: n(\"circlepin\")\n      },\n      flagDiamondpin: {\n        className: \"highcharts-flag-diamondpin\",\n        start: n(\"flag\")\n      },\n      flagSquarepin: {\n        className: \"highcharts-flag-squarepin\",\n        start: n(\"squarepin\")\n      },\n      flagSimplepin: {\n        className: \"highcharts-flag-simplepin\",\n        start: n(\"nopin\")\n      },\n      zoomX: {\n        className: \"highcharts-zoom-x\",\n        init: function init(a) {\n          this.chart.update({\n            chart: {\n              zooming: {\n                type: \"x\"\n              }\n            }\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      zoomY: {\n        className: \"highcharts-zoom-y\",\n        init: function init(a) {\n          this.chart.update({\n            chart: {\n              zooming: {\n                type: \"y\"\n              }\n            }\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      zoomXY: {\n        className: \"highcharts-zoom-xy\",\n        init: function init(a) {\n          this.chart.update({\n            chart: {\n              zooming: {\n                type: \"xy\"\n              }\n            }\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      seriesTypeLine: {\n        className: \"highcharts-series-type-line\",\n        init: function init(a) {\n          this.chart.series[0].update({\n            type: \"line\",\n            useOhlcData: !0\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      seriesTypeOhlc: {\n        className: \"highcharts-series-type-ohlc\",\n        init: function init(a) {\n          this.chart.series[0].update({\n            type: \"ohlc\"\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      seriesTypeCandlestick: {\n        className: \"highcharts-series-type-candlestick\",\n        init: function init(a) {\n          this.chart.series[0].update({\n            type: \"candlestick\"\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      seriesTypeHeikinAshi: {\n        className: \"highcharts-series-type-heikinashi\",\n        init: function init(a) {\n          this.chart.series[0].update({\n            type: \"heikinashi\"\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      seriesTypeHLC: {\n        className: \"highcharts-series-type-hlc\",\n        init: function init(a) {\n          this.chart.series[0].update({\n            type: \"hlc\",\n            useOhlcData: !0\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      seriesTypeHollowCandlestick: {\n        className: \"highcharts-series-type-hollowcandlestick\",\n        init: function init(a) {\n          this.chart.series[0].update({\n            type: \"hollowcandlestick\"\n          });\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      fullScreen: {\n        className: \"highcharts-full-screen\",\n        noDataState: \"normal\",\n        init: function init(a) {\n          this.chart.fullscreen && this.chart.fullscreen.toggle();\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      currentPriceIndicator: {\n        className: \"highcharts-current-price-indicator\",\n        init: function init(a) {\n          var b = this.chart,\n              d = b.series,\n              g = b.stockTools,\n              f = w(b.series);\n          g && g.guiEnabled && (d.forEach(function (a) {\n            a.update({\n              lastPrice: {\n                enabled: !f\n              },\n              lastVisiblePrice: {\n                enabled: !f,\n                label: {\n                  enabled: !0\n                }\n              }\n            }, !1);\n          }), b.redraw());\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      indicators: {\n        className: \"highcharts-indicators\",\n        init: function init() {\n          var a = this;\n          p(a, \"showPopup\", {\n            formType: \"indicators\",\n            options: {},\n            onSubmit: function onSubmit(b) {\n              r.call(a, b);\n            }\n          });\n        }\n      },\n      toggleAnnotations: {\n        className: \"highcharts-toggle-annotations\",\n        init: function init(a) {\n          var b = this.chart,\n              d = b.stockTools,\n              g = d.getIconsURL();\n          this.toggledAnnotations = !this.toggledAnnotations;\n          (b.annotations || []).forEach(function (a) {\n            a.setVisibility(!this.toggledAnnotations);\n          }, this);\n          d && d.guiEnabled && (a.firstChild.style[\"background-image\"] = this.toggledAnnotations ? 'url(\"' + g + 'annotations-hidden.svg\")' : 'url(\"' + g + 'annotations-visible.svg\")');\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      },\n      saveChart: {\n        className: \"highcharts-save-chart\",\n        noDataState: \"normal\",\n        init: function init(a) {\n          var c = this.chart,\n              e = [],\n              g = [],\n              f = [],\n              l = [];\n          c.annotations.forEach(function (a, b) {\n            e[b] = a.userOptions;\n          });\n          c.series.forEach(function (a) {\n            a.is(\"sma\") ? g.push(a.userOptions) : \"flags\" === a.type && f.push(a.userOptions);\n          });\n          c.yAxis.forEach(function (a) {\n            d(a) && l.push(a.options);\n          });\n          b.win.localStorage.setItem(\"highcharts-chart\", JSON.stringify({\n            annotations: e,\n            indicators: g,\n            flags: f,\n            yAxes: l\n          }));\n          p(this, \"deselectButton\", {\n            button: a\n          });\n        }\n      }\n    };\n  });\n  r(b, \"Stock/StockToolsDefaults.js\", [], function () {\n    return {\n      lang: {\n        stockTools: {\n          gui: {\n            simpleShapes: \"Simple shapes\",\n            lines: \"Lines\",\n            crookedLines: \"Crooked lines\",\n            measure: \"Measure\",\n            advanced: \"Advanced\",\n            toggleAnnotations: \"Toggle annotations\",\n            verticalLabels: \"Vertical labels\",\n            flags: \"Flags\",\n            zoomChange: \"Zoom change\",\n            typeChange: \"Type change\",\n            saveChart: \"Save chart\",\n            indicators: \"Indicators\",\n            currentPriceIndicator: \"Current Price Indicators\",\n            zoomX: \"Zoom X\",\n            zoomY: \"Zoom Y\",\n            zoomXY: \"Zooom XY\",\n            fullScreen: \"Fullscreen\",\n            typeOHLC: \"OHLC\",\n            typeLine: \"Line\",\n            typeCandlestick: \"Candlestick\",\n            typeHLC: \"HLC\",\n            typeHollowCandlestick: \"Hollow Candlestick\",\n            typeHeikinAshi: \"Heikin Ashi\",\n            circle: \"Circle\",\n            ellipse: \"Ellipse\",\n            label: \"Label\",\n            rectangle: \"Rectangle\",\n            flagCirclepin: \"Flag circle\",\n            flagDiamondpin: \"Flag diamond\",\n            flagSquarepin: \"Flag square\",\n            flagSimplepin: \"Flag simple\",\n            measureXY: \"Measure XY\",\n            measureX: \"Measure X\",\n            measureY: \"Measure Y\",\n            segment: \"Segment\",\n            arrowSegment: \"Arrow segment\",\n            ray: \"Ray\",\n            arrowRay: \"Arrow ray\",\n            line: \"Line\",\n            arrowInfinityLine: \"Arrow line\",\n            horizontalLine: \"Horizontal line\",\n            verticalLine: \"Vertical line\",\n            infinityLine: \"Infinity line\",\n            crooked3: \"Crooked 3 line\",\n            crooked5: \"Crooked 5 line\",\n            elliott3: \"Elliott 3 line\",\n            elliott5: \"Elliott 5 line\",\n            verticalCounter: \"Vertical counter\",\n            verticalLabel: \"Vertical label\",\n            verticalArrow: \"Vertical arrow\",\n            fibonacci: \"Fibonacci\",\n            fibonacciTimeZones: \"Fibonacci Time Zones\",\n            pitchfork: \"Pitchfork\",\n            parallelChannel: \"Parallel channel\",\n            timeCycles: \"Time Cycles\"\n          }\n        },\n        navigation: {\n          popup: {\n            circle: \"Circle\",\n            ellipse: \"Ellipse\",\n            rectangle: \"Rectangle\",\n            label: \"Label\",\n            segment: \"Segment\",\n            arrowSegment: \"Arrow segment\",\n            ray: \"Ray\",\n            arrowRay: \"Arrow ray\",\n            line: \"Line\",\n            arrowInfinityLine: \"Arrow line\",\n            horizontalLine: \"Horizontal line\",\n            verticalLine: \"Vertical line\",\n            crooked3: \"Crooked 3 line\",\n            crooked5: \"Crooked 5 line\",\n            elliott3: \"Elliott 3 line\",\n            elliott5: \"Elliott 5 line\",\n            verticalCounter: \"Vertical counter\",\n            verticalLabel: \"Vertical label\",\n            verticalArrow: \"Vertical arrow\",\n            fibonacci: \"Fibonacci\",\n            fibonacciTimeZones: \"Fibonacci Time Zones\",\n            pitchfork: \"Pitchfork\",\n            parallelChannel: \"Parallel channel\",\n            infinityLine: \"Infinity line\",\n            measure: \"Measure\",\n            measureXY: \"Measure XY\",\n            measureX: \"Measure X\",\n            measureY: \"Measure Y\",\n            timeCycles: \"Time Cycles\",\n            flags: \"Flags\",\n            addButton: \"add\",\n            saveButton: \"save\",\n            editButton: \"edit\",\n            removeButton: \"remove\",\n            series: \"Series\",\n            volume: \"Volume\",\n            connector: \"Connector\",\n            innerBackground: \"Inner background\",\n            outerBackground: \"Outer background\",\n            crosshairX: \"Crosshair X\",\n            crosshairY: \"Crosshair Y\",\n            tunnel: \"Tunnel\",\n            background: \"Background\",\n            noFilterMatch: \"No match\",\n            searchIndicators: \"Search Indicators\",\n            clearFilter: \"\\u2715 clear filter\",\n            index: \"Index\",\n            period: \"Period\",\n            periods: \"Periods\",\n            standardDeviation: \"Standard deviation\",\n            periodTenkan: \"Tenkan period\",\n            periodSenkouSpanB: \"Senkou Span B period\",\n            periodATR: \"ATR period\",\n            multiplierATR: \"ATR multiplier\",\n            shortPeriod: \"Short period\",\n            longPeriod: \"Long period\",\n            signalPeriod: \"Signal period\",\n            decimals: \"Decimals\",\n            algorithm: \"Algorithm\",\n            topBand: \"Top band\",\n            bottomBand: \"Bottom band\",\n            initialAccelerationFactor: \"Initial acceleration factor\",\n            maxAccelerationFactor: \"Max acceleration factor\",\n            increment: \"Increment\",\n            multiplier: \"Multiplier\",\n            ranges: \"Ranges\",\n            highIndex: \"High index\",\n            lowIndex: \"Low index\",\n            deviation: \"Deviation\",\n            xAxisUnit: \"x-axis unit\",\n            factor: \"Factor\",\n            fastAvgPeriod: \"Fast average period\",\n            slowAvgPeriod: \"Slow average period\",\n            average: \"Average\",\n            indicatorAliases: {\n              abands: [\"Acceleration Bands\"],\n              bb: [\"Bollinger Bands\"],\n              dema: [\"Double Exponential Moving Average\"],\n              ema: [\"Exponential Moving Average\"],\n              ikh: [\"Ichimoku Kinko Hyo\"],\n              keltnerchannels: [\"Keltner Channels\"],\n              linearRegression: [\"Linear Regression\"],\n              pivotpoints: [\"Pivot Points\"],\n              pc: [\"Price Channel\"],\n              priceenvelopes: [\"Price Envelopes\"],\n              psar: [\"Parabolic SAR\"],\n              sma: [\"Simple Moving Average\"],\n              supertrend: [\"Super Trend\"],\n              tema: [\"Triple Exponential Moving Average\"],\n              vbp: [\"Volume by Price\"],\n              vwap: [\"Volume Weighted Moving Average\"],\n              wma: [\"Weighted Moving Average\"],\n              zigzag: [\"Zig Zag\"],\n              apo: [\"Absolute price indicator\"],\n              ad: [\"Accumulation/Distribution\"],\n              aroon: [\"Aroon\"],\n              aroonoscillator: [\"Aroon oscillator\"],\n              atr: [\"Average True Range\"],\n              ao: [\"Awesome oscillator\"],\n              cci: [\"Commodity Channel Index\"],\n              chaikin: [\"Chaikin\"],\n              cmf: [\"Chaikin Money Flow\"],\n              cmo: [\"Chande Momentum Oscillator\"],\n              disparityindex: [\"Disparity Index\"],\n              dmi: [\"Directional Movement Index\"],\n              dpo: [\"Detrended price oscillator\"],\n              klinger: [\"Klinger Oscillator\"],\n              linearRegressionAngle: [\"Linear Regression Angle\"],\n              linearRegressionIntercept: [\"Linear Regression Intercept\"],\n              linearRegressionSlope: [\"Linear Regression Slope\"],\n              macd: [\"Moving Average Convergence Divergence\"],\n              mfi: [\"Money Flow Index\"],\n              momentum: [\"Momentum\"],\n              natr: [\"Normalized Average True Range\"],\n              obv: [\"On-Balance Volume\"],\n              ppo: [\"Percentage Price oscillator\"],\n              roc: [\"Rate of Change\"],\n              rsi: [\"Relative Strength Index\"],\n              slowstochastic: [\"Slow Stochastic\"],\n              stochastic: [\"Stochastic\"],\n              trix: [\"TRIX\"],\n              williamsr: [\"Williams %R\"]\n            }\n          }\n        }\n      },\n      stockTools: {\n        gui: {\n          enabled: !0,\n          className: \"highcharts-bindings-wrapper\",\n          toolbarClassName: \"stocktools-toolbar\",\n          buttons: \"indicators separator simpleShapes lines crookedLines measure advanced toggleAnnotations separator verticalLabels flags separator zoomChange fullScreen typeChange separator currentPriceIndicator saveChart\".split(\" \"),\n          definitions: {\n            separator: {\n              symbol: \"separator.svg\"\n            },\n            simpleShapes: {\n              items: [\"label\", \"circle\", \"ellipse\", \"rectangle\"],\n              circle: {\n                symbol: \"circle.svg\"\n              },\n              ellipse: {\n                symbol: \"ellipse.svg\"\n              },\n              rectangle: {\n                symbol: \"rectangle.svg\"\n              },\n              label: {\n                symbol: \"label.svg\"\n              }\n            },\n            flags: {\n              items: [\"flagCirclepin\", \"flagDiamondpin\", \"flagSquarepin\", \"flagSimplepin\"],\n              flagSimplepin: {\n                symbol: \"flag-basic.svg\"\n              },\n              flagDiamondpin: {\n                symbol: \"flag-diamond.svg\"\n              },\n              flagSquarepin: {\n                symbol: \"flag-trapeze.svg\"\n              },\n              flagCirclepin: {\n                symbol: \"flag-elipse.svg\"\n              }\n            },\n            lines: {\n              items: \"segment arrowSegment ray arrowRay line arrowInfinityLine horizontalLine verticalLine\".split(\" \"),\n              segment: {\n                symbol: \"segment.svg\"\n              },\n              arrowSegment: {\n                symbol: \"arrow-segment.svg\"\n              },\n              ray: {\n                symbol: \"ray.svg\"\n              },\n              arrowRay: {\n                symbol: \"arrow-ray.svg\"\n              },\n              line: {\n                symbol: \"line.svg\"\n              },\n              arrowInfinityLine: {\n                symbol: \"arrow-line.svg\"\n              },\n              verticalLine: {\n                symbol: \"vertical-line.svg\"\n              },\n              horizontalLine: {\n                symbol: \"horizontal-line.svg\"\n              }\n            },\n            crookedLines: {\n              items: [\"elliott3\", \"elliott5\", \"crooked3\", \"crooked5\"],\n              crooked3: {\n                symbol: \"crooked-3.svg\"\n              },\n              crooked5: {\n                symbol: \"crooked-5.svg\"\n              },\n              elliott3: {\n                symbol: \"elliott-3.svg\"\n              },\n              elliott5: {\n                symbol: \"elliott-5.svg\"\n              }\n            },\n            verticalLabels: {\n              items: [\"verticalCounter\", \"verticalLabel\", \"verticalArrow\"],\n              verticalCounter: {\n                symbol: \"vertical-counter.svg\"\n              },\n              verticalLabel: {\n                symbol: \"vertical-label.svg\"\n              },\n              verticalArrow: {\n                symbol: \"vertical-arrow.svg\"\n              }\n            },\n            advanced: {\n              items: [\"fibonacci\", \"fibonacciTimeZones\", \"pitchfork\", \"parallelChannel\", \"timeCycles\"],\n              pitchfork: {\n                symbol: \"pitchfork.svg\"\n              },\n              fibonacci: {\n                symbol: \"fibonacci.svg\"\n              },\n              fibonacciTimeZones: {\n                symbol: \"fibonacci-timezone.svg\"\n              },\n              parallelChannel: {\n                symbol: \"parallel-channel.svg\"\n              },\n              timeCycles: {\n                symbol: \"time-cycles.svg\"\n              }\n            },\n            measure: {\n              items: [\"measureXY\", \"measureX\", \"measureY\"],\n              measureX: {\n                symbol: \"measure-x.svg\"\n              },\n              measureY: {\n                symbol: \"measure-y.svg\"\n              },\n              measureXY: {\n                symbol: \"measure-xy.svg\"\n              }\n            },\n            toggleAnnotations: {\n              symbol: \"annotations-visible.svg\"\n            },\n            currentPriceIndicator: {\n              symbol: \"current-price-show.svg\"\n            },\n            indicators: {\n              symbol: \"indicators.svg\"\n            },\n            zoomChange: {\n              items: [\"zoomX\", \"zoomY\", \"zoomXY\"],\n              zoomX: {\n                symbol: \"zoom-x.svg\"\n              },\n              zoomY: {\n                symbol: \"zoom-y.svg\"\n              },\n              zoomXY: {\n                symbol: \"zoom-xy.svg\"\n              }\n            },\n            typeChange: {\n              items: \"typeOHLC typeLine typeCandlestick typeHollowCandlestick typeHLC typeHeikinAshi\".split(\" \"),\n              typeOHLC: {\n                symbol: \"series-ohlc.svg\"\n              },\n              typeLine: {\n                symbol: \"series-line.svg\"\n              },\n              typeCandlestick: {\n                symbol: \"series-candlestick.svg\"\n              },\n              typeHLC: {\n                symbol: \"series-hlc.svg\"\n              },\n              typeHeikinAshi: {\n                symbol: \"series-heikin-ashi.svg\"\n              },\n              typeHollowCandlestick: {\n                symbol: \"series-hollow-candlestick.svg\"\n              }\n            },\n            fullScreen: {\n              symbol: \"fullscreen.svg\"\n            },\n            saveChart: {\n              symbol: \"save-chart.svg\"\n            }\n          }\n        }\n      }\n    };\n  });\n  r(b, \"Stock/StockTools.js\", [b[\"Core/DefaultOptions.js\"], b[\"Extensions/Annotations/NavigationBindingsUtilities.js\"], b[\"Stock/StockToolsBindings.js\"], b[\"Stock/StockToolsDefaults.js\"], b[\"Stock/StockToolsUtilities.js\"], b[\"Core/Utilities.js\"]], function (b, n, m, q, f, h) {\n    function d(a, b, d, g) {\n      function k(a) {\n        return e(a) && !v(a) && a.match(\"%\");\n      }\n\n      var f = 0,\n          l;\n\n      if (g) {\n        var h = c(parseFloat(g.top) / 100);\n        var u = c(parseFloat(g.height) / 100);\n      }\n\n      return {\n        positions: a.map(function (g, e) {\n          var p = c(k(g.options.height) ? parseFloat(g.options.height) / 100 : g.height / b);\n          g = c(k(g.options.top) ? parseFloat(g.options.top) / 100 : (g.top - g.chart.plotTop) / b);\n          u ? (g > h && (g -= u), f = Math.max(f, (g || 0) + (p || 0))) : (v(p) || (p = a[e - 1].series.every(function (a) {\n            return a.is(\"sma\");\n          }) ? l : d / 100), v(g) || (g = f), l = p, f = c(Math.max(f, (g || 0) + (p || 0))));\n          return {\n            height: 100 * p,\n            top: 100 * g\n          };\n        }),\n        allAxesHeight: f\n      };\n    }\n\n    function w(a) {\n      var b = [];\n      a.forEach(function (c, d) {\n        c = a[d + 1];\n        b[d] = c ? {\n          enabled: !0,\n          controlledAxis: {\n            next: [t(c.options.id, c.options.index)]\n          }\n        } : {\n          enabled: !1\n        };\n      });\n      return b;\n    }\n\n    function r(a, b, d, g) {\n      a.forEach(function (e, k) {\n        k = a[k - 1];\n        e.top = k ? c(k.height + k.top) : 0;\n        d && (e.height = c(e.height + g * b));\n      });\n      return a;\n    }\n\n    function x(a) {\n      var b = this.chart,\n          d = b.yAxis.filter(l);\n      b = this.getYAxisPositions(d, b.plotHeight, 20, a);\n      var g = b.positions,\n          e = b.allAxesHeight,\n          k = this.getYAxisResizers(d);\n      !a && e <= c(1) ? g[g.length - 1] = {\n        height: 20,\n        top: c(100 * e - 20)\n      } : g.forEach(function (a) {\n        a.height = a.height / (100 * e) * 100;\n        a.top = a.top / (100 * e) * 100;\n      });\n      g.forEach(function (a, b) {\n        d[b].update({\n          height: a.height + \"%\",\n          top: a.top + \"%\",\n          resize: k[b],\n          offset: 0\n        }, !1);\n      });\n    }\n\n    var g = b.setOptions,\n        p = n.getAssignedAxis,\n        l = f.isNotNavigatorYAxis,\n        a = f.isPriceIndicatorEnabled,\n        c = h.correctFloat,\n        e = h.defined,\n        v = h.isNumber,\n        t = h.pick,\n        y = [];\n    return {\n      compose: function compose(b) {\n        -1 === y.indexOf(b) && (y.push(b), b = b.prototype, b.getYAxisPositions = d, b.getYAxisResizers = w, b.recalculateYAxisPositions = r, b.resizeYAxes = x, b.utils = {\n          indicatorsWithAxes: f.indicatorsWithAxes,\n          indicatorsWithVolume: f.indicatorsWithVolume,\n          getAssignedAxis: p,\n          isPriceIndicatorEnabled: a,\n          manageIndicators: f.manageIndicators\n        });\n        -1 === y.indexOf(g) && (y.push(g), g(q), g({\n          navigation: {\n            bindings: m\n          }\n        }));\n      }\n    };\n  });\n  r(b, \"Stock/StockToolbar.js\", [b[\"Core/Utilities.js\"]], function (b) {\n    var n = b.addEvent,\n        m = b.createElement,\n        q = b.css,\n        f = b.fireEvent,\n        h = b.getStyle,\n        d = b.isArray,\n        r = b.merge,\n        w = b.pick;\n\n    b = function () {\n      function b(b, d, l) {\n        this.wrapper = this.toolbar = this.submenu = this.showhideBtn = this.listWrapper = this.arrowWrapper = this.arrowUp = this.arrowDown = void 0;\n        this.chart = l;\n        this.options = b;\n        this.lang = d;\n        this.iconsURL = this.getIconsURL();\n        this.guiEnabled = b.enabled;\n        this.visible = w(b.visible, !0);\n        this.placed = w(b.placed, !1);\n        this.eventsToUnbind = [];\n        this.guiEnabled && (this.createHTML(), this.init(), this.showHideNavigatorion());\n        f(this, \"afterInit\");\n      }\n\n      b.prototype.init = function () {\n        var b = this,\n            f = this.lang,\n            l = this.options,\n            a = this.toolbar,\n            c = l.definitions,\n            e = a.childNodes;\n        l.buttons.forEach(function (g) {\n          var l = b.addButton(a, c, g, f);\n          b.eventsToUnbind.push(n(l.buttonWrapper, \"click\", function () {\n            return b.eraseActiveButtons(e, l.buttonWrapper);\n          }));\n          d(c[g].items) && b.addSubmenu(l, c[g]);\n        });\n      };\n\n      b.prototype.addSubmenu = function (b, d) {\n        var g = this,\n            a = b.submenuArrow,\n            c = b.buttonWrapper,\n            e = h(c, \"width\"),\n            f = this.wrapper,\n            p = this.listWrapper,\n            r = this.toolbar.childNodes,\n            k = this.submenu = m(\"ul\", {\n          className: \"highcharts-submenu-wrapper\"\n        }, void 0, c);\n        this.addSubmenuItems(c, d);\n        this.eventsToUnbind.push(n(a, \"click\", function (a) {\n          a.stopPropagation();\n          g.eraseActiveButtons(r, c);\n          0 <= c.className.indexOf(\"highcharts-current\") ? (p.style.width = p.startWidth + \"px\", c.classList.remove(\"highcharts-current\"), k.style.display = \"none\") : (k.style.display = \"block\", a = k.offsetHeight - c.offsetHeight - 3, k.offsetHeight + c.offsetTop > f.offsetHeight && c.offsetTop > a || (a = 0), q(k, {\n            top: -a + \"px\",\n            left: e + 3 + \"px\"\n          }), c.className += \" highcharts-current\", p.startWidth = f.offsetWidth, p.style.width = p.startWidth + h(p, \"padding-left\") + k.offsetWidth + 3 + \"px\");\n        }));\n      };\n\n      b.prototype.addSubmenuItems = function (b, d) {\n        var g = this,\n            a = this,\n            c = this.submenu,\n            e = this.lang,\n            f = this.listWrapper,\n            h;\n        d.items.forEach(function (k) {\n          h = g.addButton(c, d, k, e);\n          g.eventsToUnbind.push(n(h.mainButton, \"click\", function () {\n            a.switchSymbol(this, b, !0);\n            f.style.width = f.startWidth + \"px\";\n            c.style.display = \"none\";\n          }));\n        });\n        var p = c.querySelectorAll(\"li > .highcharts-menu-item-btn\")[0];\n        this.switchSymbol(p, !1);\n      };\n\n      b.prototype.eraseActiveButtons = function (b, d, f) {\n        [].forEach.call(b, function (a) {\n          a !== d && (a.classList.remove(\"highcharts-current\"), a.classList.remove(\"highcharts-active\"), f = a.querySelectorAll(\".highcharts-submenu-wrapper\"), 0 < f.length && (f[0].style.display = \"none\"));\n        });\n      };\n\n      b.prototype.addButton = function (d, f, l, a) {\n        void 0 === a && (a = {});\n        f = f[l];\n        var c = f.items,\n            e = f.className || \"\";\n        d = m(\"li\", {\n          className: w(b.prototype.classMapping[l], \"\") + \" \" + e,\n          title: a[l] || l\n        }, void 0, d);\n        l = m(\"span\", {\n          className: \"highcharts-menu-item-btn\"\n        }, void 0, d);\n        if (c && c.length) return f = m(\"span\", {\n          className: \"highcharts-submenu-item-arrow highcharts-arrow-right\"\n        }, void 0, d), f.style.backgroundImage = \"url(\" + this.iconsURL + \"arrow-bottom.svg)\", {\n          buttonWrapper: d,\n          mainButton: l,\n          submenuArrow: f\n        };\n        l.style.backgroundImage = \"url(\" + this.iconsURL + f.symbol + \")\";\n        return {\n          buttonWrapper: d,\n          mainButton: l\n        };\n      };\n\n      b.prototype.addNavigation = function () {\n        var b = this.wrapper;\n        this.arrowWrapper = m(\"div\", {\n          className: \"highcharts-arrow-wrapper\"\n        });\n        this.arrowUp = m(\"div\", {\n          className: \"highcharts-arrow-up\"\n        }, void 0, this.arrowWrapper);\n        this.arrowUp.style.backgroundImage = \"url(\" + this.iconsURL + \"arrow-right.svg)\";\n        this.arrowDown = m(\"div\", {\n          className: \"highcharts-arrow-down\"\n        }, void 0, this.arrowWrapper);\n        this.arrowDown.style.backgroundImage = \"url(\" + this.iconsURL + \"arrow-right.svg)\";\n        b.insertBefore(this.arrowWrapper, b.childNodes[0]);\n        this.scrollButtons();\n      };\n\n      b.prototype.scrollButtons = function () {\n        var b = this.wrapper,\n            d = this.toolbar,\n            f = .1 * b.offsetHeight,\n            a = 0;\n        this.eventsToUnbind.push(n(this.arrowUp, \"click\", function () {\n          0 < a && (a -= f, d.style.marginTop = -a + \"px\");\n        }));\n        this.eventsToUnbind.push(n(this.arrowDown, \"click\", function () {\n          b.offsetHeight + a <= d.offsetHeight + f && (a += f, d.style.marginTop = -a + \"px\");\n        }));\n      };\n\n      b.prototype.createHTML = function () {\n        var b = this.chart,\n            d = this.options,\n            f = b.container,\n            a = b.options.navigation,\n            c = this.wrapper = m(\"div\", {\n          className: \"highcharts-stocktools-wrapper \" + d.className + \" \" + (a && a.bindingsClassName)\n        });\n        f.appendChild(c);\n        [\"mousedown\", \"mousemove\", \"click\", \"touchstart\"].forEach(function (a) {\n          n(c, a, function (a) {\n            return a.stopPropagation();\n          });\n        });\n        n(c, \"mouseover\", function (a) {\n          return b.pointer.onContainerMouseLeave(a);\n        });\n        this.toolbar = f = m(\"ul\", {\n          className: \"highcharts-stocktools-toolbar \" + d.toolbarClassName\n        });\n        this.listWrapper = d = m(\"div\", {\n          className: \"highcharts-menu-wrapper\"\n        });\n        c.insertBefore(d, c.childNodes[0]);\n        d.insertBefore(f, d.childNodes[0]);\n        this.showHideToolbar();\n        this.addNavigation();\n      };\n\n      b.prototype.showHideNavigatorion = function () {\n        this.visible && this.toolbar.offsetHeight > this.wrapper.offsetHeight - 50 ? this.arrowWrapper.style.display = \"block\" : (this.toolbar.style.marginTop = \"0px\", this.arrowWrapper.style.display = \"none\");\n      };\n\n      b.prototype.showHideToolbar = function () {\n        var b = this.chart,\n            d = this.wrapper,\n            f = this.listWrapper,\n            a = this.submenu,\n            c = this.showhideBtn = m(\"div\", {\n          className: \"highcharts-toggle-toolbar highcharts-arrow-left\"\n        }, void 0, d),\n            e = this.visible;\n        c.style.backgroundImage = \"url(\" + this.iconsURL + \"arrow-right.svg)\";\n        e ? (d.style.height = \"100%\", c.style.top = h(f, \"padding-top\") + \"px\", c.style.left = d.offsetWidth + h(f, \"padding-left\") + \"px\") : (a && (a.style.display = \"none\"), c.style.left = \"0px\", e = this.visible = !1, f.classList.add(\"highcharts-hide\"), c.classList.toggle(\"highcharts-arrow-right\"), d.style.height = c.offsetHeight + \"px\");\n        this.eventsToUnbind.push(n(c, \"click\", function () {\n          b.update({\n            stockTools: {\n              gui: {\n                visible: !e,\n                placed: !0\n              }\n            }\n          });\n        }));\n      };\n\n      b.prototype.switchSymbol = function (b, d) {\n        var f = b.parentNode,\n            a = f.className;\n        f = f.parentNode.parentNode;\n        -1 < a.indexOf(\"highcharts-disabled-btn\") || (f.className = \"\", a && f.classList.add(a.trim()), f.querySelectorAll(\".highcharts-menu-item-btn\")[0].style.backgroundImage = b.style.backgroundImage, d && this.toggleButtonActiveClass(f));\n      };\n\n      b.prototype.toggleButtonActiveClass = function (b) {\n        b = b.classList;\n        b.contains(\"highcharts-active\") ? b.remove(\"highcharts-active\") : b.add(\"highcharts-active\");\n      };\n\n      b.prototype.unselectAllButtons = function (b) {\n        var d = b.parentNode.querySelectorAll(\".highcharts-active\");\n        [].forEach.call(d, function (d) {\n          d !== b && d.classList.remove(\"highcharts-active\");\n        });\n      };\n\n      b.prototype.update = function (b, d) {\n        r(!0, this.chart.options.stockTools, b);\n        this.destroy();\n        this.chart.setStockTools(b);\n        this.chart.navigationBindings && this.chart.navigationBindings.update();\n        this.chart.isDirtyBox = !0;\n        w(d, !0) && this.chart.redraw();\n      };\n\n      b.prototype.destroy = function () {\n        var b = this.wrapper,\n            d = b && b.parentNode;\n        this.eventsToUnbind.forEach(function (b) {\n          return b();\n        });\n        d && d.removeChild(b);\n      };\n\n      b.prototype.redraw = function () {\n        this.showHideNavigatorion();\n      };\n\n      b.prototype.getIconsURL = function () {\n        return this.chart.options.navigation.iconsURL || this.options.iconsURL || \"https://code.highcharts.com/10.2.1/gfx/stock-icons/\";\n      };\n\n      return b;\n    }();\n\n    b.prototype.classMapping = {\n      circle: \"highcharts-circle-annotation\",\n      ellipse: \"highcharts-ellipse-annotation\",\n      rectangle: \"highcharts-rectangle-annotation\",\n      label: \"highcharts-label-annotation\",\n      segment: \"highcharts-segment\",\n      arrowSegment: \"highcharts-arrow-segment\",\n      ray: \"highcharts-ray\",\n      arrowRay: \"highcharts-arrow-ray\",\n      line: \"highcharts-infinity-line\",\n      arrowInfinityLine: \"highcharts-arrow-infinity-line\",\n      verticalLine: \"highcharts-vertical-line\",\n      horizontalLine: \"highcharts-horizontal-line\",\n      crooked3: \"highcharts-crooked3\",\n      crooked5: \"highcharts-crooked5\",\n      elliott3: \"highcharts-elliott3\",\n      elliott5: \"highcharts-elliott5\",\n      pitchfork: \"highcharts-pitchfork\",\n      fibonacci: \"highcharts-fibonacci\",\n      fibonacciTimeZones: \"highcharts-fibonacci-time-zones\",\n      parallelChannel: \"highcharts-parallel-channel\",\n      measureX: \"highcharts-measure-x\",\n      measureY: \"highcharts-measure-y\",\n      measureXY: \"highcharts-measure-xy\",\n      timeCycles: \"highcharts-time-cycles\",\n      verticalCounter: \"highcharts-vertical-counter\",\n      verticalLabel: \"highcharts-vertical-label\",\n      verticalArrow: \"highcharts-vertical-arrow\",\n      currentPriceIndicator: \"highcharts-current-price-indicator\",\n      indicators: \"highcharts-indicators\",\n      flagCirclepin: \"highcharts-flag-circlepin\",\n      flagDiamondpin: \"highcharts-flag-diamondpin\",\n      flagSquarepin: \"highcharts-flag-squarepin\",\n      flagSimplepin: \"highcharts-flag-simplepin\",\n      zoomX: \"highcharts-zoom-x\",\n      zoomY: \"highcharts-zoom-y\",\n      zoomXY: \"highcharts-zoom-xy\",\n      typeLine: \"highcharts-series-type-line\",\n      typeOHLC: \"highcharts-series-type-ohlc\",\n      typeHLC: \"highcharts-series-type-hlc\",\n      typeCandlestick: \"highcharts-series-type-candlestick\",\n      typeHollowCandlestick: \"highcharts-series-type-hollowcandlestick\",\n      typeHeikinAshi: \"highcharts-series-type-heikinashi\",\n      fullScreen: \"highcharts-full-screen\",\n      toggleAnnotations: \"highcharts-toggle-annotations\",\n      saveChart: \"highcharts-save-chart\",\n      separator: \"highcharts-separator\"\n    };\n    return b;\n  });\n  r(b, \"Stock/StockToolsGui.js\", [b[\"Core/DefaultOptions.js\"], b[\"Stock/StockToolsDefaults.js\"], b[\"Stock/StockToolbar.js\"], b[\"Core/Utilities.js\"]], function (b, n, m, q) {\n    function f(a) {\n      var b = this.options,\n          c = b.lang;\n      a = v(b.stockTools && b.stockTools.gui, a && a.gui);\n      this.stockTools = new m(a, c && c.stockTools && c.stockTools.gui, this);\n      this.stockTools.guiEnabled && (this.isDirtyBox = !0);\n    }\n\n    function h() {\n      this.setStockTools();\n    }\n\n    function d() {\n      if (this.stockTools) {\n        var a = this.options.chart,\n            b = this.stockTools.listWrapper;\n        b = b && (b.startWidth + e(b, \"padding-left\") + e(b, \"padding-right\") || b.offsetWidth);\n        var c = !1;\n        b && b < this.plotWidth ? (a = t(a.spacingLeft, a.spacing && a.spacing[3], 0) + b, c = a - this.spacingBox.x, this.spacingBox.x = a, this.spacingBox.width -= c, c = !0) : 0 === b && (c = !0);\n        b !== this.stockTools.prevOffsetWidth && (this.stockTools.prevOffsetWidth = b, c && (this.isDirtyLegend = !0));\n      }\n    }\n\n    function r() {\n      this.stockTools && this.stockTools.destroy();\n    }\n\n    function w() {\n      var a = this.stockTools && this.stockTools.listWrapper;\n      (a = a && (a.startWidth + e(a, \"padding-left\") + e(a, \"padding-right\") || a.offsetWidth)) && a < this.plotWidth && (this.plotLeft += a, this.spacing[3] += a);\n    }\n\n    function x() {\n      this.stockTools && this.stockTools.guiEnabled && this.stockTools.redraw();\n    }\n\n    function g() {\n      var a = this.stockTools,\n          b = a && a.toolbar && a.toolbar.querySelector(\".highcharts-current-price-indicator\");\n      a && this.navigationBindings && this.options.series && b && (this.navigationBindings.constructor.prototype.utils.isPriceIndicatorEnabled(this.series) ? b.firstChild.style[\"background-image\"] = 'url(\"' + a.getIconsURL() + 'current-price-hide.svg\")' : b.firstChild.style[\"background-image\"] = 'url(\"' + a.getIconsURL() + 'current-price-show.svg\")');\n    }\n\n    function p(a) {\n      var b = this.chart.stockTools;\n      b && b.guiEnabled && (a = a.button, 0 <= a.parentNode.className.indexOf(\"highcharts-submenu-wrapper\") && (a = a.parentNode.parentNode), b.toggleButtonActiveClass(a));\n    }\n\n    function l(a) {\n      var b = this.chart.stockTools;\n\n      if (b && b.guiEnabled) {\n        var c = a.button;\n        b.unselectAllButtons(a.button);\n        0 <= c.parentNode.className.indexOf(\"highcharts-submenu-wrapper\") && (c = c.parentNode.parentNode);\n        b.toggleButtonActiveClass(c);\n      }\n    }\n\n    var a = b.setOptions,\n        c = q.addEvent,\n        e = q.getStyle,\n        v = q.merge,\n        t = q.pick,\n        y = [];\n    return {\n      compose: function compose(b, e) {\n        -1 === y.indexOf(b) && (y.push(b), c(b, \"afterGetContainer\", h), c(b, \"beforeRedraw\", d), c(b, \"beforeRender\", d), c(b, \"destroy\", r), c(b, \"getMargins\", w, {\n          order: 0\n        }), c(b, \"redraw\", x), c(b, \"render\", g), b.prototype.setStockTools = f);\n        -1 === y.indexOf(e) && (y.push(e), c(e, \"deselectButton\", p), c(e, \"selectButton\", l));\n        -1 === y.indexOf(a) && (y.push(a), a(n));\n      }\n    };\n  });\n  r(b, \"masters/modules/stock-tools.src.js\", [b[\"Core/Globals.js\"], b[\"Extensions/Annotations/NavigationBindings.js\"], b[\"Stock/StockTools.js\"], b[\"Stock/StockToolsGui.js\"], b[\"Stock/StockToolbar.js\"]], function (b, n, m, q, f) {\n    b.Toolbar = f;\n    m.compose(n);\n    q.compose(b.Chart, n);\n  });\n});","map":null,"metadata":{},"sourceType":"script"}