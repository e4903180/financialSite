{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport PropTypes from 'prop-types';\nimport { SIZES } from './constants';\nimport { isFunction, warn } from './utils';\nvar INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\nexport var sizeType = PropTypes.oneOf(SIZES);\n/**\n * Allows additional warnings or messaging related to prop validation.\n */\n\nexport function checkPropType(validator, callback) {\n  return function (props, propName, componentName) {\n    PropTypes.checkPropTypes(_defineProperty({}, propName, validator), props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props) {\n  var caseSensitive = props.caseSensitive,\n      filterBy = props.filterBy;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function deprecated(validator, reason) {\n  return function (props, propName, componentName) {\n    if (props[propName] != null) {\n      warn(false, \"The `\".concat(propName, \"` prop is deprecated. \").concat(reason));\n    }\n\n    return PropTypes.checkPropTypes(_defineProperty({}, propName, validator), props, 'prop', componentName);\n  };\n}\nexport function defaultInputValueType(props) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      multiple = props.multiple,\n      selected = props.selected;\n  var name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), \"`defaultInputValue` will be overridden by the value from `\".concat(name, \"`.\"));\n}\nexport function defaultSelectedType(props) {\n  var defaultSelected = props.defaultSelected,\n      multiple = props.multiple;\n  warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' + 'Typeahead in single-select mode. The selections will be truncated to a ' + 'single selection.');\n}\nexport function highlightOnlyResultType(_ref) {\n  var allowNew = _ref.allowNew,\n      highlightOnlyResult = _ref.highlightOnlyResult;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props) {\n  var filterBy = props.filterBy,\n      ignoreDiacritics = props.ignoreDiacritics;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(_ref2) {\n  var inputProps = _ref2.inputProps;\n\n  if (!(inputProps && Object.prototype.toString.call(inputProps) === '[object Object]')) {\n    return;\n  } // Blacklisted properties.\n\n\n  INPUT_PROPS_BLACKLIST.forEach(function (_ref3) {\n    var alt = _ref3.alt,\n        prop = _ref3.prop;\n    var msg = alt ? \" Use the top-level `\".concat(alt, \"` prop instead.\") : null;\n    warn(!inputProps[prop], \"The `\".concat(prop, \"` property of `inputProps` will be ignored.\").concat(msg));\n  });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n  warn(props[propName] != null, \"The prop `\".concat(propName, \"` is required to make `\").concat(componentName, \"` \") + 'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType(_ref4) {\n  var allowNew = _ref4.allowNew,\n      labelKey = _ref4.labelKey;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport var optionType = PropTypes.oneOfType([PropTypes.object, PropTypes.string]);\nexport function selectedType(_ref5) {\n  var multiple = _ref5.multiple,\n      onChange = _ref5.onChange,\n      selected = _ref5.selected;\n  warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' + 'in single-select mode. This may lead to unexpected behaviors or errors.');\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}","map":null,"metadata":{},"sourceType":"module"}