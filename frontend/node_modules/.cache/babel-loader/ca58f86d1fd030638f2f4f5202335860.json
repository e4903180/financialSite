{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onBlur\", \"onClick\", \"onFocus\", \"onRemove\", \"option\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport useRootClose from \"react-overlays/useRootClose\";\nimport { getDisplayName, isFunction } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onRemove: PropTypes.func,\n  option: optionType.isRequired\n};\nexport function useToken(_ref) {\n  var onBlur = _ref.onBlur,\n      onClick = _ref.onClick,\n      onFocus = _ref.onFocus,\n      onRemove = _ref.onRemove,\n      option = _ref.option,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rootElement = _useState4[0],\n      attachRef = _useState4[1];\n\n  var handleBlur = function handleBlur(e) {\n    setActive(false);\n    onBlur && onBlur(e);\n  };\n\n  var handleClick = function handleClick(e) {\n    setActive(true);\n    onClick && onClick(e);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    setActive(true);\n    onFocus && onFocus(e);\n  };\n\n  var handleRemove = function handleRemove() {\n    onRemove && onRemove(option);\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (e.key === 'Backspace' && active) {\n      // Prevent browser from going back.\n      e.preventDefault();\n      handleRemove();\n    }\n  };\n\n  useRootClose(rootElement, handleBlur, _objectSpread(_objectSpread({}, props), {}, {\n    disabled: !active\n  }));\n  return {\n    active: active,\n    onBlur: handleBlur,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onRemove: isFunction(onRemove) ? handleRemove : undefined,\n    ref: attachRef\n  };\n}\n/* istanbul ignore next */\n\nexport function withToken(Component) {\n  var displayName = \"withToken(\".concat(getDisplayName(Component), \")\");\n\n  var WrappedToken = function WrappedToken(props) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, useToken(props)));\n  };\n\n  WrappedToken.displayName = displayName;\n  WrappedToken.propTypes = propTypes;\n  return WrappedToken;\n}","map":null,"metadata":{},"sourceType":"module"}