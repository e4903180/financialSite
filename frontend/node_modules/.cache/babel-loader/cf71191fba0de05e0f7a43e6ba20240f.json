{"ast":null,"code":"import _slicedToArray from \"/home/cosbi/financialSite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/cosbi/financialSite/frontend/src/component/rederCellExpand.tsx\";\nimport * as React from \"react\";\nimport { Paper, Popper } from \"@material-ui/core\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { isOverflown } from \"@material-ui/data-grid\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      alignItems: \"center\",\n      lineHeight: \"24px\",\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\",\n      display: \"flex\",\n      \"& .MuiRating-root\": {\n        marginRight: theme.spacing(1)\n      },\n      \"& .cellValue\": {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\"\n      }\n    }\n  });\n});\nvar CellExpand = React.memo(function CellExpand(props) {\n  var width = props.width,\n      value = props.value;\n  var wrapper = React.useRef(null);\n  var cellDiv = React.useRef(null);\n  var cellValue = React.useRef(null);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      anchorEl = _React$useState2[0],\n      setAnchorEl = _React$useState2[1];\n\n  var classes = useStyles();\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      showFullCell = _React$useState4[0],\n      setShowFullCell = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      showPopper = _React$useState6[0],\n      setShowPopper = _React$useState6[1];\n\n  var showCell = React.useCallback(function () {\n    setShowFullCell(true);\n  }, []);\n  var hideCell = React.useCallback(function () {\n    setShowFullCell(false);\n  }, []);\n  React.useEffect(function () {\n    if (cellDiv.current) {\n      setAnchorEl(cellDiv.current);\n    }\n  }, []);\n  React.useEffect(function () {\n    if (cellValue && cellValue.current) {\n      var isCurrentlyOverflown = isOverflown(cellValue.current);\n      setShowPopper(isCurrentlyOverflown);\n    }\n  }, [width]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapper,\n    className: classes.root,\n    onMouseEnter: showCell,\n    onMouseLeave: hideCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: cellDiv,\n    style: {\n      height: 1,\n      width: width,\n      display: \"block\",\n      position: \"absolute\",\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: cellValue,\n    className: \"cellValue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, value), showPopper && /*#__PURE__*/React.createElement(Popper, {\n    id: \"123\",\n    open: showFullCell && anchorEl != null,\n    anchorEl: anchorEl,\n    style: {\n      width: width,\n      marginLeft: -17\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    elevation: 1,\n    style: {\n      minHeight: wrapper.current.offsetHeight - 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, value))));\n});\nexport function RenderCellExpand(params) {\n  return /*#__PURE__*/React.createElement(CellExpand, {\n    value: params.value ? params.value.toString() : \"\",\n    width: params.colDef.width,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/home/cosbi/financialSite/frontend/src/component/rederCellExpand.tsx"],"names":["React","Paper","Popper","createStyles","makeStyles","isOverflown","useStyles","theme","root","alignItems","lineHeight","width","height","position","display","marginRight","spacing","whiteSpace","overflow","textOverflow","CellExpand","memo","props","value","wrapper","useRef","cellDiv","cellValue","useState","anchorEl","setAnchorEl","classes","showFullCell","setShowFullCell","showPopper","setShowPopper","showCell","useCallback","hideCell","useEffect","current","isCurrentlyOverflown","top","marginLeft","minHeight","offsetHeight","padding","RenderCellExpand","params","toString","colDef"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Paper, Popper } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { CellParams, isOverflown } from \"@material-ui/data-grid\";\n\ninterface CellExpandProps {\n  value: string;\n  width: number;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      alignItems: \"center\",\n      lineHeight: \"24px\",\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\",\n      display: \"flex\",\n      \"& .MuiRating-root\": {\n        marginRight: theme.spacing(1)\n      },\n      \"& .cellValue\": {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\"\n      }\n    }\n  })\n);\nconst CellExpand = React.memo(function CellExpand(props: CellExpandProps) {\n  const { width, value } = props;\n  const wrapper = React.useRef<HTMLDivElement | null>(null);\n  const cellDiv = React.useRef(null);\n  const cellValue = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const classes = useStyles();\n  const [showFullCell, setShowFullCell] = React.useState(false);\n  const [showPopper, setShowPopper] = React.useState(false);\n\n  const showCell = React.useCallback(() => {\n    setShowFullCell(true);\n  }, []);\n  const hideCell = React.useCallback(() => {\n    setShowFullCell(false);\n  }, []);\n\n  React.useEffect(() => {\n    if (cellDiv.current) {\n      setAnchorEl(cellDiv.current);\n    }\n  }, []);\n  React.useEffect(() => {\n    if (cellValue && cellValue.current) {\n      const isCurrentlyOverflown = isOverflown(cellValue.current!);\n      setShowPopper(isCurrentlyOverflown);\n    }\n  }, [width]);\n\n  return (\n    <div\n      ref={wrapper}\n      className={classes.root}\n      onMouseEnter={showCell}\n      onMouseLeave={hideCell}\n    >\n      <div\n        ref={cellDiv}\n        style={{\n          height: 1,\n          width,\n          display: \"block\",\n          position: \"absolute\",\n          top: 0\n        }}\n      />\n      <div ref={cellValue} className=\"cellValue\">\n        {value}\n      </div>\n      {showPopper && (\n        <Popper\n          id={\"123\"}\n          open={showFullCell && anchorEl != null}\n          anchorEl={anchorEl}\n          style={{ width, marginLeft: -17 }}\n        >\n          <Paper\n            elevation={1}\n            style={{ minHeight: wrapper.current!.offsetHeight - 2 }}\n          >\n            <div style={{ padding: 5 }}>{value}</div>\n          </Paper>\n        </Popper>\n      )}\n    </div>\n  );\n});\nexport function RenderCellExpand(params: CellParams) {\n  return (\n    <CellExpand\n      value={params.value ? params.value.toString() : \"\"}\n      width={params.colDef.width}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}