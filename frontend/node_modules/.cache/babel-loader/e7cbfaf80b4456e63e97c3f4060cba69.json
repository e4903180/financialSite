{"ast":null,"code":"import _slicedToArray from \"/home/cosbi/financialSite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/cosbi/financialSite/frontend/src/component/homePage/calendarItem.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { DayPilot, DayPilotMonth } from \"@daypilot/daypilot-lite-react\";\nimport axios from 'axios';\nimport { config } from '../../constant';\nimport { columns_twse } from '../column/column';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { Button } from '@mui/material';\n\nfunction CalendarItem() {\n  var calenderRef = useRef();\n  var date = new Date();\n  var today = date.getFullYear() + \"-\" + String(date.getMonth() + 1).padStart(2, '0') + \"-\" + String(date.getDate()).padStart(2, '0');\n\n  var _useState = useState(today),\n      _useState2 = _slicedToArray(_useState, 2),\n      startDate = _useState2[0],\n      setStartDate = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState(new Date().getFullYear()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      year = _useState6[0],\n      setYear = _useState6[1];\n\n  var _useState7 = useState(new Date().getMonth() + 1),\n      _useState8 = _slicedToArray(_useState7, 2),\n      month = _useState8[0],\n      setMonth = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      page = _useState10[0],\n      setPage = _useState10[1];\n\n  var _useState11 = useState(10),\n      _useState12 = _slicedToArray(_useState11, 2),\n      pageSize = _useState12[0],\n      setPageSize = _useState12[1];\n\n  var _useState13 = useState({\n    startDate: today\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      option = _useState14[0],\n      setOption = _useState14[1];\n\n  useEffect(function () {\n    axios.post(config[\"rootApiIP\"] + \"/data/calenderData\", {\n      \"year\": year,\n      \"month\": month\n    }).then(function (res) {\n      setPage(0);\n      setData(res.data);\n    }).catch(function (res) {\n      if (res.response.data === \"Session expired\") window.location.reload();\n    });\n    axios.get(config[\"rootApiIP\"] + \"/data/calender\", {\n      params: {\n        \"year\": year,\n        \"month\": month\n      }\n    }).then(function (res) {\n      setOption({\n        events: res.data\n      });\n    }).catch(function (res) {\n      if (res.response.data === \"Session expired\") window.location.reload();\n    });\n  }, [year, month]);\n\n  function clickEvent(info) {\n    window.open(config[\"rootPathPrefix\"] + \"/database/search/\" + info.event.title, '_blank', 'noopener,noreferrer');\n  } // async function getCalendarData(fetchInfo, successCallback, failureCallback) {\n  //     try {\n  //         let temp_year = fetchInfo.start.getFullYear()\n  //         let temp_month = (fetchInfo.start.getMonth() + 1).toString().padStart(2, '0');\n  //         setYear(temp_year)\n  //         setMonth(temp_month)\n  //         const response = await axios.post(config[\"rootApiIP\"] + \"/data/calender\", { \"year\" : temp_year, \"month\" : temp_month })\n  //         successCallback(\n  //             response.data.map(event => {\n  //                 return ({\n  //                     title: event.title,\n  //                     start: event.date.slice(0, 10),\n  //                 });\n  //             })\n  //         );\n  //     } catch (error) {\n  //         if(error.response.data === \"Session expired\") window.location.reload()\n  //         failureCallback(error)\n  //     }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row py-3 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      var start = calenderRef.current.control.visibleStart();\n      var newStart = start.addMonths(1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, \"\\u4E0B\\u500B\\u6708\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calender\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DayPilotMonth, Object.assign({\n    ref: calenderRef\n  }, option, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row py-3 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"\\u6CD5\\u8AAA\\u6703\\u8A73\\u7D30\\u8CC7\\u8A0A\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-10 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    autoHeight: true,\n    columns: columns_twse,\n    rows: data,\n    page: page,\n    onPageChange: function onPageChange(newPage) {\n      return setPage(newPage);\n    },\n    pageSize: pageSize,\n    onPageSizeChange: function onPageSizeChange(newPageSize) {\n      return setPageSize(newPageSize);\n    },\n    rowsPerPageOptions: [5, 10, 20],\n    getRowId: function getRowId(row) {\n      return row.ID;\n    },\n    components: {\n      Toolbar: GridToolbar\n    },\n    componentsProps: {\n      toolbar: {\n        showQuickFilter: true\n      }\n    },\n    pagination: true,\n    disableColumnMenu: true,\n    disableColumnSelector: true,\n    disableDensitySelector: true,\n    disableColumnFilter: true,\n    disableSelectionOnClick: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default CalendarItem;","map":{"version":3,"sources":["/home/cosbi/financialSite/frontend/src/component/homePage/calendarItem.js"],"names":["React","useEffect","useRef","useState","FullCalendar","dayGridPlugin","DayPilot","DayPilotMonth","axios","config","columns_twse","DataGrid","GridToolbar","Button","CalendarItem","calenderRef","date","Date","today","getFullYear","String","getMonth","padStart","getDate","startDate","setStartDate","data","setData","year","setYear","month","setMonth","page","setPage","pageSize","setPageSize","option","setOption","post","then","res","catch","response","window","location","reload","get","params","events","clickEvent","info","open","event","title","start","current","control","visibleStart","newStart","addMonths","newPage","newPageSize","row","ID","Toolbar","toolbar","showQuickFilter"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport {DayPilot, DayPilotMonth} from \"@daypilot/daypilot-lite-react\";\nimport axios from 'axios';\nimport { config } from '../../constant';\nimport { columns_twse } from '../column/column';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { Button } from '@mui/material';\n\nfunction CalendarItem() {\n    const calenderRef = useRef()\n    var date = new Date();\n    const today = date.getFullYear() + \"-\" + String(date.getMonth() + 1).padStart(2, '0') + \"-\" + String(date.getDate()).padStart(2, '0')\n\n    const [startDate, setStartDate] = useState(today)\n    const [data, setData] = useState([])\n    const [year, setYear] = useState(new Date().getFullYear())\n    const [month, setMonth] = useState(new Date().getMonth() + 1)\n    const [page, setPage] = useState(0);\n    const [pageSize, setPageSize] = useState(10);\n    const [option, setOption] = useState({\n        startDate : today\n    })\n\n    useEffect(() => {\n        axios.post(config[\"rootApiIP\"] + \"/data/calenderData\", { \"year\" : year, \"month\" : month })\n        .then(res => {\n            setPage(0)\n            setData(res.data)\n        }).catch(res => {\n            if(res.response.data === \"Session expired\") window.location.reload()\n        })\n\n        axios.get(config[\"rootApiIP\"] + \"/data/calender\", {\n            params: {\n                \"year\" : year,\n                \"month\" : month\n            }\n        })\n        .then(res => {\n            setOption({\n                events : res.data\n            })\n        }).catch(res => {\n            if(res.response.data === \"Session expired\") window.location.reload()\n        })\n    }, [year, month])\n\n    function clickEvent(info){\n        window.open(config[\"rootPathPrefix\"] + \"/database/search/\" + info.event.title, '_blank', 'noopener,noreferrer')\n    }\n\n    // async function getCalendarData(fetchInfo, successCallback, failureCallback) {\n    //     try {\n    //         let temp_year = fetchInfo.start.getFullYear()\n    //         let temp_month = (fetchInfo.start.getMonth() + 1).toString().padStart(2, '0');\n\n    //         setYear(temp_year)\n    //         setMonth(temp_month)\n\n    //         const response = await axios.post(config[\"rootApiIP\"] + \"/data/calender\", { \"year\" : temp_year, \"month\" : temp_month })\n\n    //         successCallback(\n    //             response.data.map(event => {\n    //                 return ({\n    //                     title: event.title,\n    //                     start: event.date.slice(0, 10),\n    //                 });\n    //             })\n    //         );\n    //     } catch (error) {\n    //         if(error.response.data === \"Session expired\") window.location.reload()\n    //         failureCallback(error)\n    //     }\n    // }\n    \n    return (\n        <>\n            {/* <div className = 'row py-3 mx-auto'>\n                <div className = 'col-md-8 mx-auto'>\n                    <FullCalendar\n                        contentHeight={\"auto\"}\n                        aspectRatio={1.8}\n                        plugins={[ dayGridPlugin ]}\n                        initialView = \"dayGridMonth\"\n                        events = { (fetchInfo, successCallback, failureCallback) => getCalendarData(fetchInfo, successCallback, failureCallback) }\n                        dayMaxEventRows = { 3 }\n                        eventClick = { clickEvent }\n                        eventMouseEnter = { info => info.el.style.cursor = \"pointer\" }\n                        showNonCurrentDates = { false }\n                        fixedWeekCount = { false }\n                    />\n                </div>\n            </div> */}\n\n            <div className = 'row py-3 mx-auto'>\n                <div className = 'toolBar'>\n                    <Button onClick = {() => {\n                        const start = calenderRef.current.control.visibleStart()\n                        const newStart = start.addMonths(1)\n                        \n                    }}>下個月</Button>\n                </div>\n\n                <div className = 'calender'>\n                    <DayPilotMonth\n                        ref = {calenderRef}\n                        {...option}\n                    />\n                </div>\n            </div>\n\n            <div className = 'row py-3 mx-auto'>\n                <h2 className = 'text-center'>法說會詳細資訊</h2>\n                \n                <div className = 'col-md-10 mx-auto'>\n                    <DataGrid\n                        autoHeight\n                        columns = { columns_twse }\n                        rows = { data }\n                        page = { page }\n                        onPageChange = {(newPage) => setPage(newPage)}\n                        pageSize = { pageSize }\n                        onPageSizeChange={ (newPageSize) => setPageSize(newPageSize) }\n                        rowsPerPageOptions = {[5, 10, 20]}\n                        getRowId = { row => row.ID }\n                        components = {{ Toolbar: GridToolbar }}\n                        componentsProps = {{ toolbar: { showQuickFilter: true },}}\n                        pagination\n                        disableColumnMenu\n                        disableColumnSelector\n                        disableDensitySelector\n                        disableColumnFilter\n                        disableSelectionOnClick = { true }\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default CalendarItem;"]},"metadata":{},"sourceType":"module"}