{"ast":null,"code":"import _regeneratorRuntime from \"/home/cosbi/financialSite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cosbi/financialSite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/cosbi/financialSite/frontend/src/component/homePage/calendarItem.js\";\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport axios from 'axios';\nimport { config } from '../../constant';\n\nfunction CalendarItem(props) {\n  function clickEvent(info) {\n    props.setType(\"dbSearch\"); // window.open(config[\"rootPathPrefix\"] + \"/database/search/\" + info.event.title, '_blank', 'noopener,noreferrer')\n  }\n\n  function getCalendarData(_x, _x2, _x3) {\n    return _getCalendarData.apply(this, arguments);\n  }\n\n  function _getCalendarData() {\n    _getCalendarData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fetchInfo, successCallback, failureCallback) {\n      var temp_year, temp_month, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              temp_year = fetchInfo.start.getFullYear();\n              temp_month = (fetchInfo.start.getMonth() + 1).toString().padStart(2, '0');\n              _context.next = 5;\n              return axios.post(config[\"rootApiIP\"] + \"/data/calender\", {\n                \"year\": temp_year,\n                \"month\": temp_month\n              });\n\n            case 5:\n              response = _context.sent;\n              successCallback(response.data.map(function (event) {\n                return {\n                  title: event.title,\n                  start: event.date.slice(0, 10)\n                };\n              }));\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              if (_context.t0.response.data === \"Session expired\") window.location.reload();\n              failureCallback(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n    return _getCalendarData.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mt-3 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-8 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin],\n    initialView: \"dayGridMonth\",\n    events: function events(fetchInfo, successCallback, failureCallback) {\n      return getCalendarData(fetchInfo, successCallback, failureCallback);\n    },\n    dayMaxEventRows: 3,\n    eventClick: clickEvent,\n    eventMouseEnter: function eventMouseEnter(info) {\n      return info.el.style.cursor = \"pointer\";\n    },\n    showNonCurrentDates: false,\n    fixedWeekCount: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default CalendarItem;","map":{"version":3,"sources":["/home/cosbi/financialSite/frontend/src/component/homePage/calendarItem.js"],"names":["React","FullCalendar","dayGridPlugin","axios","config","CalendarItem","props","clickEvent","info","setType","getCalendarData","fetchInfo","successCallback","failureCallback","temp_year","start","getFullYear","temp_month","getMonth","toString","padStart","post","response","data","map","event","title","date","slice","window","location","reload","el","style","cursor"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,gBAAvB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,WAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrBF,IAAAA,KAAK,CAACG,OAAN,CAAc,UAAd,EADqB,CAErB;AACH;;AAJwB,WAMVC,eANU;AAAA;AAAA;;AAAA;AAAA,gFAMzB,iBAA+BC,SAA/B,EAA0CC,eAA1C,EAA2DC,eAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEYC,cAAAA,SAFZ,GAEwBH,SAAS,CAACI,KAAV,CAAgBC,WAAhB,EAFxB;AAGYC,cAAAA,UAHZ,GAGyB,CAACN,SAAS,CAACI,KAAV,CAAgBG,QAAhB,KAA6B,CAA9B,EAAiCC,QAAjC,GAA4CC,QAA5C,CAAqD,CAArD,EAAwD,GAAxD,CAHzB;AAAA;AAAA,qBAK+BjB,KAAK,CAACkB,IAAN,CAAWjB,MAAM,CAAC,WAAD,CAAN,GAAsB,gBAAjC,EAAmD;AAAE,wBAASU,SAAX;AAAsB,yBAAUG;AAAhC,eAAnD,CAL/B;;AAAA;AAKcK,cAAAA,QALd;AAOQV,cAAAA,eAAe,CACXU,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,UAAAC,KAAK,EAAI;AACvB,uBAAQ;AACJC,kBAAAA,KAAK,EAAED,KAAK,CAACC,KADT;AAEJX,kBAAAA,KAAK,EAAEU,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiB,CAAjB,EAAoB,EAApB;AAFH,iBAAR;AAIH,eALD,CADW,CAAf;AAPR;AAAA;;AAAA;AAAA;AAAA;AAgBQ,kBAAG,YAAMN,QAAN,CAAeC,IAAf,KAAwB,iBAA3B,EAA8CM,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAC9ClB,cAAAA,eAAe,aAAf;;AAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANyB;AAAA;AAAA;;AA2BzB,sBACI,uDACI;AAAK,IAAA,SAAS,EAAG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,OAAO,EAAE,CAAEX,aAAF,CADb;AAEI,IAAA,WAAW,EAAG,cAFlB;AAGI,IAAA,MAAM,EAAK,gBAACS,SAAD,EAAYC,eAAZ,EAA6BC,eAA7B;AAAA,aAAiDH,eAAe,CAACC,SAAD,EAAYC,eAAZ,EAA6BC,eAA7B,CAAhE;AAAA,KAHf;AAII,IAAA,eAAe,EAAK,CAJxB;AAKI,IAAA,UAAU,EAAKN,UALnB;AAMI,IAAA,eAAe,EAAK,yBAAAC,IAAI;AAAA,aAAIA,IAAI,CAACwB,EAAL,CAAQC,KAAR,CAAcC,MAAd,GAAuB,SAA3B;AAAA,KAN5B;AAOI,IAAA,mBAAmB,EAAK,KAP5B;AAQI,IAAA,cAAc,EAAK,KARvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ,CADJ;AAkBH;;AAED,eAAe7B,YAAf","sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport axios from 'axios';\nimport { config } from '../../constant';\n\nfunction CalendarItem(props) {\n    function clickEvent(info){\n        props.setType(\"dbSearch\")\n        // window.open(config[\"rootPathPrefix\"] + \"/database/search/\" + info.event.title, '_blank', 'noopener,noreferrer')\n    }\n\n    async function getCalendarData(fetchInfo, successCallback, failureCallback) {\n        try {\n            let temp_year = fetchInfo.start.getFullYear()\n            let temp_month = (fetchInfo.start.getMonth() + 1).toString().padStart(2, '0');\n\n            const response = await axios.post(config[\"rootApiIP\"] + \"/data/calender\", { \"year\" : temp_year, \"month\" : temp_month })\n\n            successCallback(\n                response.data.map(event => {\n                    return ({\n                        title: event.title,\n                        start: event.date.slice(0, 10),\n                    });\n                })\n            );\n        } catch (error) {\n            if(error.response.data === \"Session expired\") window.location.reload()\n            failureCallback(error)\n        }\n    }\n    \n    return (\n        <>\n            <div className = 'row mt-3 mx-auto'>\n                <div className = 'col-md-8 mx-auto'>\n                    <FullCalendar\n                        plugins={[ dayGridPlugin ]}\n                        initialView = \"dayGridMonth\"\n                        events = { (fetchInfo, successCallback, failureCallback) => getCalendarData(fetchInfo, successCallback, failureCallback) }\n                        dayMaxEventRows = { 3 }\n                        eventClick = { clickEvent }\n                        eventMouseEnter = { info => info.el.style.cursor = \"pointer\" }\n                        showNonCurrentDates = { false }\n                        fixedWeekCount = { false }\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default CalendarItem;"]},"metadata":{},"sourceType":"module"}