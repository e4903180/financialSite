{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"allowNew\", \"delay\", \"emptyLabel\", \"isLoading\", \"minLength\", \"onInputChange\", \"onSearch\", \"options\", \"promptText\", \"searchText\", \"useCache\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useCallback, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport { optionType } from '../propTypes';\nimport { getDisplayName, isFunction } from '../utils';\nvar propTypes = {\n  /**\n   * Delay, in milliseconds, before performing search.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * Whether or not a request is currently pending. Necessary for the\n   * container to know when new results are available.\n   */\n  isLoading: PropTypes.bool.isRequired,\n\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * Callback to perform when the search is executed.\n   */\n  onSearch: PropTypes.func.isRequired,\n\n  /**\n   * Options to be passed to the typeahead. Will typically be the query\n   * results, but can also be initial default options.\n   */\n  options: PropTypes.arrayOf(optionType),\n\n  /**\n   * Message displayed in the menu when there is no user input.\n   */\n  promptText: PropTypes.node,\n\n  /**\n   * Message displayed in the menu while the request is pending.\n   */\n  searchText: PropTypes.node,\n\n  /**\n   * Whether or not the component should cache query results.\n   */\n  useCache: PropTypes.bool\n};\n/**\n * Logic that encapsulates common behavior and functionality around\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Optional query caching\n *  - Search prompt and empty results behaviors\n */\n\nexport function useAsync(props) {\n  var allowNew = props.allowNew,\n      _props$delay = props.delay,\n      delay = _props$delay === void 0 ? 200 : _props$delay,\n      emptyLabel = props.emptyLabel,\n      isLoading = props.isLoading,\n      _props$minLength = props.minLength,\n      minLength = _props$minLength === void 0 ? 2 : _props$minLength,\n      onInputChange = props.onInputChange,\n      onSearch = props.onSearch,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$promptText = props.promptText,\n      promptText = _props$promptText === void 0 ? 'Type to search...' : _props$promptText,\n      _props$searchText = props.searchText,\n      searchText = _props$searchText === void 0 ? 'Searching...' : _props$searchText,\n      _props$useCache = props.useCache,\n      useCache = _props$useCache === void 0 ? true : _props$useCache,\n      otherProps = _objectWithoutProperties(props, _excluded);\n\n  var cacheRef = useRef({});\n  var handleSearchDebouncedRef = useRef(null);\n  var queryRef = useRef(props.defaultInputValue || '');\n  var forceUpdate = useForceUpdate();\n  var prevProps = usePrevious(props);\n  var handleSearch = useCallback(function (query) {\n    queryRef.current = query;\n\n    if (!query || minLength && query.length < minLength) {\n      return;\n    } // Use cached results, if applicable.\n\n\n    if (useCache && cacheRef.current[query]) {\n      // Re-render the component with the cached results.\n      forceUpdate();\n      return;\n    } // Perform the search.\n\n\n    onSearch(query);\n  }, [forceUpdate, minLength, onSearch, useCache]); // Set the debounced search function.\n\n  useEffect(function () {\n    handleSearchDebouncedRef.current = debounce(handleSearch, delay);\n    return function () {\n      handleSearchDebouncedRef.current && handleSearchDebouncedRef.current.cancel();\n    };\n  }, [delay, handleSearch]);\n  useEffect(function () {\n    // Ensure that we've gone from a loading to a completed state. Otherwise\n    // an empty response could get cached if the component updates during the\n    // request (eg: if the parent re-renders for some reason).\n    if (!isLoading && prevProps && prevProps.isLoading && useCache) {\n      cacheRef.current[queryRef.current] = options;\n    }\n  });\n\n  var getEmptyLabel = function getEmptyLabel() {\n    if (!queryRef.current.length) {\n      return promptText;\n    }\n\n    if (isLoading) {\n      return searchText;\n    }\n\n    return emptyLabel;\n  };\n\n  var handleInputChange = useCallback(function (query, e) {\n    onInputChange && onInputChange(query, e);\n    handleSearchDebouncedRef.current && handleSearchDebouncedRef.current(query);\n  }, [onInputChange]);\n  var cachedQuery = cacheRef.current[queryRef.current];\n  return _objectSpread(_objectSpread({}, otherProps), {}, {\n    // Disable custom selections during a search if `allowNew` isn't a function.\n    allowNew: isFunction(allowNew) ? allowNew : allowNew && !isLoading,\n    emptyLabel: getEmptyLabel(),\n    isLoading: isLoading,\n    minLength: minLength,\n    onInputChange: handleInputChange,\n    options: useCache && cachedQuery ? cachedQuery : options\n  });\n}\nexport function withAsync(Component) {\n  var AsyncTypeahead = /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, useAsync(props), {\n      ref: ref\n    }));\n  });\n  AsyncTypeahead.displayName = \"withAsync(\".concat(getDisplayName(Component), \")\"); // @ts-ignore\n\n  AsyncTypeahead.propTypes = propTypes;\n  return AsyncTypeahead;\n}","map":null,"metadata":{},"sourceType":"module"}