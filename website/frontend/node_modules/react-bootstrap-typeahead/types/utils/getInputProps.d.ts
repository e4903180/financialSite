/// <reference types="react" />
import { TypeaheadManagerProps } from 'react-bootstrap-typeahead/types/types';
declare const getInputProps: ({ activeIndex, id, isFocused, isMenuShown, multiple, onClick, onFocus, placeholder, ...rest }: TypeaheadManagerProps) => (inputProps?: {}) => {
    'aria-activedescendant': string | undefined;
    'aria-autocomplete': string;
    'aria-expanded': boolean;
    'aria-haspopup': string;
    'aria-owns': string | undefined;
    className: string;
    onClick: import("react").MouseEventHandler<HTMLInputElement>;
    onFocus: (event: import("react").SyntheticEvent<HTMLInputElement, Event>) => void;
    role: string;
    hideMenu: () => void;
    inputNode: import("react-bootstrap-typeahead/types/types").RefElement<HTMLInputElement>;
    inputRef: (instance: HTMLInputElement | null) => void;
    onActiveItemChange: import("react-bootstrap-typeahead/types/types").OptionHandler;
    onAdd: import("react-bootstrap-typeahead/types/types").OptionHandler;
    onChange: import("react").ChangeEventHandler<HTMLInputElement>;
    onClear: () => void;
    onHide: () => void;
    onInitialItemChange: (option?: import("react-bootstrap-typeahead/types/types").Option | undefined) => void;
    onMenuItemClick: (option: import("react-bootstrap-typeahead/types/types").Option, event: import("react-bootstrap-typeahead/types/types").SelectEvent<HTMLElement>) => void;
    onRemove: import("react-bootstrap-typeahead/types/types").OptionHandler;
    results: import("react-bootstrap-typeahead/types/types").Option[];
    setItem: (item: import("react-bootstrap-typeahead/types/types").Option, position: number) => void;
    toggleMenu: () => void;
    allowNew: import("react-bootstrap-typeahead/types/types").AllowNew;
    autoFocus: boolean;
    caseSensitive: boolean;
    children: import("react-bootstrap-typeahead/types/types").TypeaheadChildren;
    defaultInputValue: string;
    defaultOpen: boolean;
    defaultSelected: import("react-bootstrap-typeahead/types/types").Option[];
    emptyLabel?: import("react").ReactNode;
    filterBy: import("react-bootstrap-typeahead/types/types").FilterByCallback | string[];
    highlightOnlyResult: boolean;
    ignoreDiacritics: boolean;
    inputProps?: import("react-bootstrap-typeahead/types/types").InputProps | undefined;
    labelKey: import("react-bootstrap-typeahead/types/types").LabelKey;
    maxResults: number;
    minLength: number;
    onBlur: import("react").FocusEventHandler<HTMLInputElement>;
    onInputChange: (text: string, event: import("react").ChangeEvent<HTMLInputElement>) => void;
    onKeyDown: import("react").KeyboardEventHandler<HTMLInputElement>;
    onMenuToggle: (isOpen: boolean) => void;
    onPaginate: (event: import("react-bootstrap-typeahead/types/types").SelectEvent<HTMLElement>, shownResults: number) => void;
    open?: boolean | undefined;
    options: import("react-bootstrap-typeahead/types/types").Option[];
    paginate: boolean;
    selected: import("react-bootstrap-typeahead/types/types").Option[];
    selectHint?: import("react-bootstrap-typeahead/types/types").SelectHint | undefined;
    activeItem?: import("react-bootstrap-typeahead/types/types").Option | undefined;
    initialItem?: import("react-bootstrap-typeahead/types/types").Option | undefined;
    showMenu: boolean;
    shownResults: number;
    text: string;
    autoComplete: string;
    placeholder: string | undefined;
    type: string;
} | {
    'aria-autocomplete': string;
    'aria-expanded': undefined;
    inputClassName: unknown;
    role: undefined;
    'aria-activedescendant': string | undefined;
    'aria-haspopup': string;
    'aria-owns': string | undefined;
    className: string;
    onClick: import("react").MouseEventHandler<HTMLInputElement>;
    onFocus: (event: import("react").SyntheticEvent<HTMLInputElement, Event>) => void;
    hideMenu: () => void;
    inputNode: import("react-bootstrap-typeahead/types/types").RefElement<HTMLInputElement>;
    inputRef: (instance: HTMLInputElement | null) => void;
    onActiveItemChange: import("react-bootstrap-typeahead/types/types").OptionHandler;
    onAdd: import("react-bootstrap-typeahead/types/types").OptionHandler;
    onChange: import("react").ChangeEventHandler<HTMLInputElement>;
    onClear: () => void;
    onHide: () => void;
    onInitialItemChange: (option?: import("react-bootstrap-typeahead/types/types").Option | undefined) => void;
    onMenuItemClick: (option: import("react-bootstrap-typeahead/types/types").Option, event: import("react-bootstrap-typeahead/types/types").SelectEvent<HTMLElement>) => void;
    onRemove: import("react-bootstrap-typeahead/types/types").OptionHandler;
    results: import("react-bootstrap-typeahead/types/types").Option[];
    setItem: (item: import("react-bootstrap-typeahead/types/types").Option, position: number) => void;
    toggleMenu: () => void;
    allowNew: import("react-bootstrap-typeahead/types/types").AllowNew;
    autoFocus: boolean;
    caseSensitive: boolean;
    children: import("react-bootstrap-typeahead/types/types").TypeaheadChildren;
    defaultInputValue: string;
    defaultOpen: boolean;
    defaultSelected: import("react-bootstrap-typeahead/types/types").Option[];
    emptyLabel?: import("react").ReactNode;
    filterBy: import("react-bootstrap-typeahead/types/types").FilterByCallback | string[];
    highlightOnlyResult: boolean;
    ignoreDiacritics: boolean;
    inputProps?: import("react-bootstrap-typeahead/types/types").InputProps | undefined;
    labelKey: import("react-bootstrap-typeahead/types/types").LabelKey;
    maxResults: number;
    minLength: number;
    onBlur: import("react").FocusEventHandler<HTMLInputElement>;
    onInputChange: (text: string, event: import("react").ChangeEvent<HTMLInputElement>) => void;
    onKeyDown: import("react").KeyboardEventHandler<HTMLInputElement>;
    onMenuToggle: (isOpen: boolean) => void;
    onPaginate: (event: import("react-bootstrap-typeahead/types/types").SelectEvent<HTMLElement>, shownResults: number) => void;
    open?: boolean | undefined;
    options: import("react-bootstrap-typeahead/types/types").Option[];
    paginate: boolean;
    selected: import("react-bootstrap-typeahead/types/types").Option[];
    selectHint?: import("react-bootstrap-typeahead/types/types").SelectHint | undefined;
    activeItem?: import("react-bootstrap-typeahead/types/types").Option | undefined;
    initialItem?: import("react-bootstrap-typeahead/types/types").Option | undefined;
    showMenu: boolean;
    shownResults: number;
    text: string;
    autoComplete: string;
    placeholder: string | undefined;
    type: string;
};
export default getInputProps;
